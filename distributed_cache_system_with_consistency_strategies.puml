@startuml Distributed Cache System with Enhanced Consistency Strategies

!pragma layout dot
allowmixing
skinparam backgroundColor #F0F0F0
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam roundCorner 10
skinparam padding 8
skinparam nodesep 60
skinparam ranksep 40

title Distributed Cache System with Enhanced Consistency Strategies

rectangle "Client Layer" as ClientLayer #E6F3FF {
    component "Client" as Client
    component "Local Cache" as LC
}

rectangle "Load Balancing Layer" as LBLayer #FFF0E6 {
    component "Load Balancer" as LB
}

rectangle "Cache Cluster" as CC #E6FFE6 {
    component "Cache Node 1" as CN1
    component "Cache Node 2" as CN2
    component "Cache Node 3" as CN3
}

rectangle "Consistency Layer" as ConsistencyLayer #FFE6E6 {
    component "Consistency Manager" as CM
    component "Bloom Filter" as BF
}

rectangle "Storage Layer" as StorageLayer #E6E6FF {
    component "Persistent Storage" as PS
}

rectangle "Management Layer" as ManagementLayer #FFFDE6 {
    component "Cache Warmer" as CW
    component "Monitoring & Alerting" as MA
}

Client -[#4CAF50,thickness=2]down-> LC : <color:#4CAF50>1. Check local cache</color>
LC -[#4CAF50,thickness=2]down-> LB : <color:#4CAF50>2. If not in local cache</color>
LB -[#4CAF50,thickness=2]down-> CC : <color:#4CAF50>3. Route request</color>
CC -[#2196F3,thickness=2]right-> BF : <color:#2196F3>4. Filter non-existent keys</color>
BF -[#2196F3,thickness=2]right-> CM : <color:#2196F3>5. Ensure consistency</color>
CM -[#2196F3,thickness=2]down-> PS : <color:#2196F3>6. Sync if needed</color>
CW -[#FFA000,thickness=2]left-> CC : <color:#FFA000>7. Preload hot data</color>
MA -[#795548,thickness=2]-> CC : <color:#795548>8. Monitor performance</color>

note right of CM
  Consistency strategies:
  - Strong consistency
  - Eventual consistency
  - Read-your-writes consistency
end note

note bottom of CC
  Consistent Hashing:
  - Virtual nodes for better distribution
  - Automatic rebalancing on node changes
end note

note right of CW
  Cache Warming:
  - Preload based on access patterns
  - Scheduled updates for hot data
end note

note left of LC
  Multi-level Caching:
  - In-memory local cache
  - Reduces network calls
end note

note bottom of BF
  Cache Penetration Protection:
  - Filters queries for non-existent keys
  - Reduces unnecessary backend calls
end note

note right of MA
  Monitoring & Alerting:
  - Cache hit/miss ratio
  - Latency tracking
  - Capacity utilization
  - Automatic scaling triggers
end note

@enduml
