@startuml
title Telegram-like System Architecture with Read/Write Splitting and Sharding

skinparam backgroundColor #D3D3D3
skinparam Shadowing false
skinparam rectangle {
  BackgroundColor #4F6377
  BorderColor #AAB3C2
  FontColor #F1F1F1
  BorderThickness 2
}
skinparam package {
  BackgroundColor #677B94
  BorderColor #AAB3C2
  FontColor #F1F1F1
  RoundCorner 25
}
skinparam cloud {
  BackgroundColor #5D8299
  BorderColor #AAB3C2
  FontColor #F1F1F1
  RoundCorner 30
}
skinparam database {
  BackgroundColor #708AA6
  BorderColor #AAB3C2
  FontColor #FFCC00
  RoundCorner 20
}

left to right direction

package "Client Side" {
  [Sender's Client]
  [Receiver's Client]
}

rectangle "Telegram Service" {
  [Load Balancer]
  [Service Instance]
}

rectangle "Authorization Service" {
  [Authorization & Permissions]
}

rectangle "Message System" {
  [Kafka (Message Queue)]
  [Kafka (Pub/Sub Model)]
  [Message Worker]
}

rectangle "Notification Service" {
  [Notification Handler]
  [Push Notification Service]
}

database "Database System" {
  package "MongoDB Cluster" {
    [Config Servers]
    package "Shard" {
      [Primary]
      [Secondary 1]
      [Secondary 2]
    }
    [MongoDB Router (mongos)]
  }
  [Redis Cache]
}

cloud "Monitoring & Logging" {
  [Monitoring]
  [Logging]
}

' Send Message Flow
[Sender's Client] -right-> [Load Balancer]: 1. Send Message
[Load Balancer] -right-> [Service Instance]
[Service Instance] -down-> [Authorization & Permissions]: 2. Check Permission
[Authorization & Permissions] -right-> [Kafka (Message Queue)]: 3. Authorized Message
[Kafka (Message Queue)] -right-> [Message Worker]: 4. Process Message
[Message Worker] -down-> [MongoDB Router (mongos)]: 5. Store Message
[MongoDB Router (mongos)] -right-> [Primary]: 6. Write to Shard
[Message Worker] -down-> [Redis Cache]: 7. Update Cache
[Message Worker] -right-> [Kafka (Pub/Sub Model)]: 8. Publish Message Event

[Kafka (Pub/Sub Model)] -down-> [Notification Handler]: 9. Trigger Notification
[Notification Handler] -right-> [Push Notification Service]: 10. Send Push Notification
[Push Notification Service] -up-> [Receiver's Client]: 11. Deliver Notification

' Read Message Flow
[Receiver's Client] -right-> [Load Balancer]: 12. Request to Read Message
[Service Instance] -down-> [Redis Cache]: 13. Check Cache
[Redis Cache] -up-> [Service Instance]: 14. Return Cached Message (if available)
[Service Instance] -down-> [MongoDB Router (mongos)]: 15. Fetch Message (if not in cache)
[MongoDB Router (mongos)] -right-> [Secondary 1]: 16. Read from Shard
[MongoDB Router (mongos)] -up-> [Service Instance]: 17. Return Message
[Service Instance] -up-> [Receiver's Client]: 18. Deliver Message

' Replication
[Primary] -down-> [Secondary 1]: Replicate
[Primary] -down-> [Secondary 2]: Replicate

' Config Servers
[Config Servers] -right-> [MongoDB Router (mongos)]: Provide Cluster Metadata

' Logging and Monitoring
[Service Instance] -up-> [Monitoring & Logging]: Log Events

@enduml
