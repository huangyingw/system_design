@startuml
!define RECTANGLE class
!define DATABASE database
!define CLOUD cloud

skinparam backgroundColor #F0F0F0

skinparam handwritten false
skinparam shadowing false
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam arrowColor #2C3E50
skinparam arrowThickness 1.5

skinparam rectangle {
  BackgroundColor #3498DB
  BorderColor #2980B9
  FontColor #FFFFFF
  BorderThickness 2
}

skinparam database {
  BackgroundColor #E74C3C
  BorderColor #C0392B
  FontColor #FFFFFF
}

skinparam cloud {
  BackgroundColor #95A5A6
  BorderColor #7F8C8D
  FontColor #FFFFFF
}

skinparam package {
  BackgroundColor #9B59B6
  BorderColor #8E44AD
  FontColor #FFFFFF
}

title Telegram-like System Architecture with Read/Write Splitting and Sharding

rectangle "Client Side" {
  [Sender's Client]
  [Receiver's Client]
}

rectangle "Frontend Services" {
  [Load Balancer]
  [Service Instance]
}

rectangle "Backend Services" {
  package "Authorization Service" {
    [Authorization & Permissions]
  }
  
  package "Message System" {
    [Kafka (Message Queue)]
    [Kafka (Pub/Sub Model)]
    [Message Worker]
  }
  
  package "Notification Service" {
    [Notification Handler]
    [Push Notification Service]
  }
}

database "Database System" {
  package "MongoDB Cluster" {
    database "Config Servers" {
      [Metadata]
    }
    package "Shard" {
      database "Primary" {
        [Write Operations]
      }
      database "Secondary 1" {
        [Read Operations]
      }
      database "Secondary 2" {
        [Read Operations]
      }
    }
    [MongoDB Router (mongos)]
  }
  database "Redis Cache" {
    [Key-Value Store]
  }
}

cloud "Monitoring & Logging" {
  [Monitoring]
  [Logging]
}

' 消息流
[Sender's Client] -[#1ABC9C,bold]-> [Load Balancer]: 1. Send Message
[Load Balancer] -[#1ABC9C,bold]-> [Service Instance]
[Service Instance] -[#1ABC9C,bold]-> [Authorization & Permissions]: 2. Check Permission
[Authorization & Permissions] -[#1ABC9C,bold]-> [Kafka (Message Queue)]: 3. Authorized Message
[Kafka (Message Queue)] -[#1ABC9C,bold]-> [Message Worker]: 4. Process Message
[Message Worker] -[#1ABC9C,bold]-> [MongoDB Router (mongos)]: 5. Store Message
[MongoDB Router (mongos)] -[#1ABC9C,bold]-> [Primary]: 6. Write to Shard
[Message Worker] -[#1ABC9C,bold]-> [Redis Cache]: 7. Update Cache
[Message Worker] -[#1ABC9C,bold]-> [Kafka (Pub/Sub Model)]: 8. Publish Message Event
[Kafka (Pub/Sub Model)] -[#1ABC9C,bold]-> [Notification Handler]: 9. Trigger Notification
[Notification Handler] -[#1ABC9C,bold]-> [Push Notification Service]: 10. Send Push Notification
[Push Notification Service] -[#1ABC9C,bold]-> [Receiver's Client]: 11. Deliver Notification

' 读取消息流
[Receiver's Client] -[#F39C12,bold]-> [Load Balancer]: 12. Request to Read Message
[Service Instance] -[#F39C12,bold]-> [Redis Cache]: 13. Check Cache
[Redis Cache] -[#F39C12,bold]-> [Service Instance]: 14. Return Cached Message (if available)
[Service Instance] -[#F39C12,bold]-> [MongoDB Router (mongos)]: 15. Fetch Message (if not in cache)
[MongoDB Router (mongos)] -[#F39C12,bold]-> [Secondary 1]: 16. Read from Shard
[MongoDB Router (mongos)] -[#F39C12,bold]-> [Service Instance]: 17. Return Message
[Service Instance] -[#F39C12,bold]-> [Receiver's Client]: 18. Deliver Message

' 复制
[Primary] -[#8E44AD,bold]-> [Secondary 1]: Replicate
[Primary] -[#8E44AD,bold]-> [Secondary 2]: Replicate

' 配置服务器
[Config Servers] -[#27AE60,bold]-> [MongoDB Router (mongos)]: Provide Cluster Metadata

' 日志和监控
[Service Instance] -[#95A5A6,bold]-> [Monitoring & Logging]: Log Events

note right of [MongoDB Router (mongos)]
  Sharding Key: user_id
  Improves query performance
  and scalability
end note

note right of [Redis Cache]
  Key: user_id:message_id
  Reduces database load
  and improves read speed
end note

note bottom of [Kafka (Message Queue)]
  Ensures reliable message
  delivery and scalability
end note

@enduml
