@startuml Telegram_Voice_Video_Call_Architecture
!define RECTANGLE class
skinparam backgroundColor #F0F0F0
skinparam handwritten false
skinparam monochrome true
skinparam packageStyle rectangle
skinparam defaultFontName Arial
skinparam defaultFontSize 14

rectangle "User Devices" {
    [Caller Device\nWebRTC Engine] as CallerDevice
    [Callee Device\nWebRTC Engine] as CalleeDevice
}

rectangle "Telegram Servers" {
    [Signaling Server] as SignalingServer
    [Call Initiator] as CallInitiator
    [Session Manager] as SessionManager
}

cloud "Network Services" {
    [STUN Server] as STUNServer
    [TURN Server] as TURNServer
}

database "Database" {
    [Call Logs] as CallLogs
    [User Preferences] as UserPreferences
}

CallerDevice -down-> SignalingServer : 1. Initiate call
SignalingServer -down-> CalleeDevice : 2. Notify incoming call
CallerDevice <--> STUNServer : 3. Get public IP
CalleeDevice <--> STUNServer : 4. Get public IP
CallerDevice <--> TURNServer : 5. Relay if needed
CalleeDevice <--> TURNServer : 6. Relay if needed
CallerDevice <---> CalleeDevice : 7. Establish P2P connection
SignalingServer --> CallLogs : Log calls
SignalingServer --> UserPreferences : Get user settings

note right of CallerDevice
  WebRTC engine handles:
  - Audio/video codec
  - Network transport
  - Echo cancellation
  - Noise suppression
end note

note right of SignalingServer
  Handles:
  - User online status
  - Call request routing
  - ICE candidate exchange
  - Call statistics
end note

note bottom of STUNServer
  Helps NAT traversal,
  discovers public IP and port
end note

note bottom of TURNServer
  Provides audio/video relay
  when P2P connection fails
end note
@enduml
