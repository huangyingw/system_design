@startuml Telegram_File_Transfer_And_Storage_Optimized

skinparam backgroundColor #E6E6FA
skinparam handwritten false
skinparam monochrome true
skinparam packageStyle rectangle
skinparam defaultFontName Arial
skinparam defaultFontSize 20
skinparam ArrowFontSize 18
skinparam NoteFontSize 16

rectangle "Client Apps" as CA {
    [Mobile App]
    [Desktop Client]
    [Web Client]
}

cloud "Global LB" as GLB {
    [GeoDNS]
}

rectangle "Regional LBs" as RLB {
    [LB - US]
    [LB - EU]
    [LB - Asia]
}

rectangle "File Transfer\nService Cluster" as FTSC {
    [Chunk Manager]
    [Metadata Handler]
    [Encryption Service]
    [Deduplication]
}

database "Metadata DB" as MDB {
    [Cassandra]
    note right of [Cassandra]
        Sharding Key: file_id
        --
        1. 按文件ID查询高效
        2. 同文件元数据同分片
        3. 支持文件级操作
    end note
}

database "Object Storage" as OS {
    [S3-compatible]
    note right of [S3-compatible]
        Sharding Key: chunk_id
        --
        1. 独立存取，高并行
        2. 支持分块和续传
        3. 均匀分布，避免热点
        4. 易于横向扩展
    end note
}

cloud "CDN" as CDN {
    [Edge Servers]
    [Caching Servers]
}

queue "File Processing\nQueue" as FPQ {
    [Kafka]
}

database "Cache Layer" as CL {
    [Redis]
    note right of [Redis]
        键设计:
        1. 文件元数据: file:{id}:meta
           Hash(name,size,type,time)
        2. 文件块列表: file:{id}:chunks
           Set(chunk_id1, chunk_id2, ...)
        3. 块元数据: chunk:{id}:meta
           Hash(size,checksum,location)
        4. 用户最近文件: user:{id}:recent
           SortedSet(file_id, timestamp)
        5. 文件访问数: file:{id}:access
           String(count)
        6. 上传状态: file:{id}:upload
           Hash(total,uploaded,status)
        --
        过期策略:
        - 元数据/块信息: LRU, 1h
        - 最近文件: 7d
        - 访问数: 30d
        - 上传状态: 完成后15m
    end note
}

rectangle "File Processing\nWorkers" as FPW {
    [Thumbnail Gen]
    [Video Transcoder]
    [Virus Scanner]
}

CA <--> GLB : HTTPS
GLB --> RLB : Route
RLB --> FTSC : Distribute
FTSC <--> MDB : CRUD
FTSC <--> OS : Store/Retrieve
FTSC --> CDN : Distribute
CDN --> CA : Serve
FTSC --> FPQ : Enqueue
FPQ --> FPW : Process
FTSC <--> CL : Cache

note "file_id 与 chunk_id 关系:\n1. 一个file_id对应多个chunk_id\n2. Metadata DB存储映射\n3. 上传: 先file_id再chunk_id\n4. 下载: file_id查所有chunk_id\n5. chunk_id格式: file_id+序列号\n6. 支持大文件分块传输" as Rel

Rel .. MDB
Rel .. OS

@enduml
