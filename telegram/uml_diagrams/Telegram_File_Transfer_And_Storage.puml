@startuml Telegram_File_Transfer_And_Storage

!pragma layout dot
allowmixing

skinparam backgroundColor #F0F0F0
skinparam defaultFontName Arial
skinparam defaultFontSize 15
skinparam ArrowFontSize 15
skinparam NoteFontSize 17
skinparam roundcorner 10
skinparam shadowing false

rectangle "Client Applications" as CA #E6F3FF {
    component "Mobile App" as MA
    component "Desktop Client" as DC
    component "Web Client" as WC
}

rectangle "Load Balancing" as LB #F0FFF0 {
    component "Global Load Balancer" as GLB
    component "Regional Load Balancers" as RLB
}

rectangle "File Transfer Service Cluster" as FTSC #E6F3FF {
    component "Chunk Manager" as CM
    component "Metadata Handler" as MH
    component "Encryption Service" as ES
    component "Deduplication" as DD
    component "Rate Limiter" as RL
    component "Compression Service" as CS
}

rectangle "Storage" as ST #F0FFFF {
    component "Metadata DB (Cassandra)" as MDB
    component "Object Storage (S3-compatible)" as OS
}

rectangle "Content Delivery" as CD #F0F8FF {
    component "CDN Edge Servers" as CES
    component "CDN Caching Servers" as CCS
}

rectangle "File Processing" as FP #E6F3FF {
    component "File Processing Queue (Kafka)" as FPQ
    component "Thumbnail Generator" as TG
    component "Video Transcoder" as VT
    component "Virus Scanner" as VS
    component "File Analyzer" as FA
}

rectangle "Caching" as CL #F0FFFF {
    component "Redis Cluster" as RC
}

rectangle "Monitoring & Analytics" as MA #FFE6E6 {
    component "Prometheus" as PM
    component "Grafana" as GF
    component "ELK Stack" as ELK
}

CA -[#4682B4,thickness=2]-> LB : <back:#FFFFFF><color:#4682B4>1. Request</color></back>
LB -[#008000,thickness=2]-> FTSC : <back:#FFFFFF><color:#008000>2. Route</color></back>
FTSC <-[#8A2BE2,thickness=2]-> ST : <back:#FFFFFF><color:#8A2BE2>3. Store/Retrieve</color></back>
FTSC -[#1E90FF,thickness=2]-> CD : <back:#FFFFFF><color:#1E90FF>4. Distribute</color></back>
CD -[#32CD32,thickness=2]-> CA : <back:#FFFFFF><color:#32CD32>5. Serve</color></back>
FTSC -[#FF69B4,thickness=2]-> FP : <back:#FFFFFF><color:#FF69B4>6. Process</color></back>
FTSC <-[#DAA520,thickness=2]-> CL : <back:#FFFFFF><color:#DAA520>7. Cache</color></back>
MA -[#FF6347,thickness=2]-> FTSC : <back:#FFFFFF><color:#FF6347>8. Monitor</color></back>

note right of MDB
    Sharding Key: file_id
    - Efficient query by file ID
    - Same shard for file metadata
    - Support file-level operations
end note

note right of OS
    Sharding Key: chunk_id
    - Independent access, high parallelism
    - Support chunking and resumable transfers
    - Even distribution, avoid hotspots
    - Easy horizontal scaling
end note

note bottom of RC
    Key Design:
    1. file:{id}:meta - Hash(name,size,type,time)
    2. file:{id}:chunks - Set(chunk_id1, chunk_id2, ...)
    3. chunk:{id}:meta - Hash(size,checksum,location)
    4. user:{id}:recent - SortedSet(file_id, timestamp)
    5. file:{id}:access - String(count)
    6. file:{id}:upload - Hash(total,uploaded,status)
    
    Expiration Strategy:
    - Metadata/chunks: LRU, 1h
    - Recent files: 7d
    - Access count: 30d
    - Upload status: 15m after completion
end note

note as FileChunkRelation
    file_id and chunk_id relationship:
    1. One file_id maps to multiple chunk_ids
    2. Metadata DB stores the mapping
    3. Upload: file_id first, then chunk_ids
    4. Download: query all chunk_ids by file_id
    5. chunk_id format: file_id + sequence number
    6. Support large file chunked transfer
end note

FileChunkRelation .. ST

@enduml
