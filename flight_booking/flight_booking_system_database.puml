@startuml
!define RECTANGLE class

skinparam rectangle {
  BackgroundColor LightBlue
  BorderColor Blue
}

skinparam linetype ortho
skinparam nodesep 30
skinparam ranksep 30
skinparam dpi 150

entity "User" as user {
  * user_id : INT <<PK>>
  --
  * name : VARCHAR(100)
  * email : VARCHAR(100)
  * password : VARCHAR(100)
  * phone : VARCHAR(15)
  --
  * created_at : DATETIME
  * updated_at : DATETIME
  --
  note right of user
    Stores user information such as
    name, email, password, and contact details.
  end note
}

entity "Flight" as flight {
  * flight_id : INT <<PK>>
  --
  * airline : VARCHAR(100)
  * flight_number : VARCHAR(20)
  * departure_airport : VARCHAR(100)
  * arrival_airport : VARCHAR(100)
  * departure_time : DATETIME
  * arrival_time : DATETIME
  * price : DECIMAL(10,2)
  * available_seats : INT
  --
  * created_at : DATETIME
  * updated_at : DATETIME
  --
  note right of flight
    Stores details of each flight
    including airline, departure, arrival, and pricing.
  end note
}

entity "Booking" as booking {
  * booking_id : INT <<PK>>
  --
  * user_id : INT <<FK>>
  * flight_id : INT <<FK>>
  * booking_date : DATETIME
  * status : VARCHAR(50)
  --
  * created_at : DATETIME
  * updated_at : DATETIME
  --
  note right of booking
    Stores booking information, linking
    a user to a specific flight.
  end note
}

entity "Payment" as payment {
  * payment_id : INT <<PK>>
  --
  * booking_id : INT <<FK>>
  * amount : DECIMAL(10,2)
  * payment_date : DATETIME
  * payment_method : VARCHAR(50)
  * payment_status : VARCHAR(50)
  --
  * created_at : DATETIME
  * updated_at : DATETIME
  --
  note right of payment
    Records payment transactions related
    to bookings, including amount and method.
  end note
}

entity "Notification" as notification {
  * notification_id : INT <<PK>>
  --
  * user_id : INT <<FK>>
  * message : TEXT
  * sent_date : DATETIME
  * status : VARCHAR(50)
  --
  * created_at : DATETIME
  * updated_at : DATETIME
  --
  note right of notification
    Stores notifications sent to users
    regarding booking and payment statuses.
  end note
}

entity "Airport" as airport {
  * airport_id : INT <<PK>>
  --
  * code : VARCHAR(10)
  * name : VARCHAR(100)
  * city : VARCHAR(100)
  * country : VARCHAR(100)
  --
  * created_at : DATETIME
  * updated_at : DATETIME
  --
  note right of airport
    Stores information about airports
    including code, name, and location.
  end note
}

entity "Airline" as airline {
  * airline_id : INT <<PK>>
  --
  * name : VARCHAR(100)
  * code : VARCHAR(10)
  * country : VARCHAR(100)
  --
  * created_at : DATETIME
  * updated_at : DATETIME
  --
  note right of airline
    Stores information about airlines
    including name, code, and country.
  end note
}

user ||--o{ booking : "has"
flight ||--o{ booking : "contains"
booking ||--o{ payment : "has"
user ||--o{ notification : "receives"
flight ||--|| airport : "departs/arrives"
flight ||--|| airline : "operated by"

@enduml
