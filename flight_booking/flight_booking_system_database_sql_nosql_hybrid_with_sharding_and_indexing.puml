@startuml
!define RECTANGLE class
skinparam backgroundColor #EEEBDC
skinparam handwritten false
skinparam linetype ortho

skinparam rectangle {
  BackgroundColor<<SQL>> LightYellow
  BackgroundColor<<NoSQL>> LightGreen
  BorderColor<<SQL>> DarkOrange
  BorderColor<<NoSQL>> DarkGreen
}

' 尝试使用特殊颜色标记分片键
skinparam class {
  AttributeFontColor<<shardingKey>> #FF4500
  AttributeIconColor<<shardingKey>> #FF4500
}

rectangle "User Service" {
  entity "User [SQL]" as user <<SQL>> {
    * user_id : INT <<PK>> <<shardingKey>>
    --
    * name : VARCHAR(100)
    * email : VARCHAR(100) <<index>>
    * password : VARCHAR(100)
    * phone : VARCHAR(15)
    --
    * created_at : DATETIME
    * updated_at : DATETIME
  }
  note bottom of user : Sharding Key: user_id
}

rectangle "Flight Service" {
  entity "Flight [SQL]" as flight <<SQL>> {
    * flight_id : INT <<PK>>
    --
    * airline : VARCHAR(100)
    * flight_number : VARCHAR(20) <<index>>
    * departure_airport : VARCHAR(100) <<index>>
    * arrival_airport : VARCHAR(100) <<index>>
    * departure_date : DATE <<shardingKey>> <<index>>
    * departure_time : DATETIME
    * arrival_time : DATETIME
    * price : DECIMAL(10,2)
    * available_seats : INT
    --
    * created_at : DATETIME
    * updated_at : DATETIME
  }
  note bottom of flight : Sharding Key: departure_date
}

rectangle "Booking Service" {
  entity "Booking [NoSQL]" as booking <<NoSQL>> {
    * booking_id : STRING <<PK>> <<shardingKey>>
    --
    * user_id : STRING <<shardingKey>>
    * flight_id : STRING
    * booking_date : DATETIME
    * status : STRING
    --
    * created_at : DATETIME
    * updated_at : DATETIME
  }
  note bottom of booking : Sharding Key: user_id + booking_id (Composite Key)
}

rectangle "Payment Service" {
  entity "Payment [SQL]" as payment <<SQL>> {
    * payment_id : INT <<PK>>
    --
    * booking_id : STRING <<FK>> <<index>>
    * amount : DECIMAL(10,2)
    * payment_date : DATETIME
    * payment_method : VARCHAR(50)
    * payment_status : VARCHAR(50) <<index>>
    --
    * created_at : DATETIME
    * updated_at : DATETIME
  }
}

rectangle "Notification Service" {
  entity "Notification [NoSQL]" as notification <<NoSQL>> {
    * notification_id : STRING <<PK>>
    --
    * user_id : STRING <<shardingKey>> <<index>>
    * message : TEXT
    * sent_date : DATETIME
    * status : VARCHAR(50) <<index>>
    --
    * created_at : DATETIME
    * updated_at : DATETIME
  }
  note bottom of notification : Sharding Key: user_id
}

rectangle "Cache Service" {
  entity "Cache [Redis]" as cache <<NoSQL>> {
    * key : STRING <<PK>>
    * value : BLOB
    * ttl : INT
    --
    * created_at : DATETIME
  }
  note bottom of cache : Key format: entity:id:field\nExample: user:1234:profile
}

user ||--o{ booking : "has"
flight ||--o{ booking : "contains"
booking ||--o{ payment : "has"
user ||--o{ notification : "receives"

@enduml
