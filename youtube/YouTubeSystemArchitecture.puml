@startuml
!define AWSPUML https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v14.0/dist
!includeurl AWSPUML/AWSCommon.puml

skinparam BackgroundColor #2C2C2C
skinparam component {
  BackgroundColor #555
  BorderColor #FFD700
  FontColor #FFD700
}
skinparam package {
  BackgroundColor Transparent
  BorderColor #FFD700
  FontColor #FFF
}
skinparam actor {
  BackgroundColor #555
  BorderColor #FFD700
  FontColor #FFD700
}
skinparam Arrow {
  FontColor #FFD700
}
skinparam note {
  BackgroundColor #555
  BorderColor #FFD700
  FontColor #FFD700
}

actor "User\n(Browser)" as User

package "Backend Layer" {
  component "[Auto Scaling]\nLoadBalancer" as LoadBalancer
  component "[Auto Scaling]\nWeb Server" as AutoScalingWeb
  component "[Auto Scaling]\nApplication Server" as AutoScalingApp
}

User -> LoadBalancer : 1. Action (Upload/Access)
LoadBalancer -> AutoScalingWeb : 2. Distribute Request
AutoScalingWeb -> AutoScalingApp : 3. Process Request (Upload/Business Logic)

package "Processing Layer" {
  component "[Asynchronous]\nMessage Queue\nService" as MQS
  component "[GPU-based]\nVideo Processing Server" as GPUVPS
  component "[Enhanced]\nTranscodingServer" as TranscodingServer
}

AutoScalingApp -> MQS : 4. Enqueue Video for Processing (Upload Scenario)
MQS -> GPUVPS : 5. Dequeue Video for Processing
GPUVPS -> TranscodingServer : 6. Request Transcoding

package "Data Layer" {
  component "[Enhanced]\nCache" as Cache
  component "[Scalable]\nVideoStorage" as VideoStorage
  component "[Optimized]\nNoSQL Database" as NoSQLDB
  component "[Optimized]\nRDBMS" as RDBMS
}

TranscodingServer -> VideoStorage : 7. Store Transcoded Videos (Various Resolutions)
AutoScalingApp -down-> Cache : 8. Check Cache (Read Scenario)
Cache -down-> VideoStorage : 9. Fetch Video if not in Cache
Cache -down-> RDBMS : 10. Fetch Data if not in Cache
Cache -down-> NoSQLDB : Fetch and Cache Data
RDBMS -down-> AutoScalingApp : Return Data

package "Content Delivery Network" {
component CDN
  component "[Enhanced]\nEdge Cache" as EdgeCache
}

VideoStorage -right-> CDN : Upload Videos to CDN
CDN -down-> User : Deliver Video Content
CDN -down-> EdgeCache : Cache Popular Content at Edge

note "Auto Scaling Load Balancer:\n- Dynamic scaling based on performance metrics\n- Intelligent routing for optimal request distribution" as NoteLoadBalancer
NoteLoadBalancer .. LoadBalancer

note "Auto Scaling Web & App Server:\n- Elastic scaling based on traffic\n- Flexible resource pools for peak times" as NoteAutoScalingServers
NoteAutoScalingServers .. AutoScalingWeb
NoteAutoScalingServers .. AutoScalingApp

note "Asynchronous Message Queue Service:\n- Asynchronous communication for reduced processing time\n- High-density task management via message queues" as NoteMQS
NoteMQS .. MQS

note "GPU-based Video Processing Server:\n- GPU acceleration for enhanced video processing\n- Parallel processing for large-scale video tasks" as NoteGPUVPS
NoteGPUVPS .. GPUVPS

note "Enhanced Cache:\n- Multi-level caching strategy\n- Intelligent cache invalidation for data accuracy" as NoteCache
NoteCache .. Cache

note "Scalable Video Storage & Optimized Databases:\n- Distributed storage for horizontal scalability\n- Database optimization with read-write separation and efficient indexing" as NoteStorageDB
NoteStorageDB .. VideoStorage
NoteStorageDB .. NoSQLDB
NoteStorageDB .. RDBMS

note "Enhanced Edge Cache in CDN:\n- Advanced caching algorithms for prioritizing popular content\n- Dynamic cache adjustment based on access patterns" as NoteEdgeCache
NoteEdgeCache .. EdgeCache

@enduml
