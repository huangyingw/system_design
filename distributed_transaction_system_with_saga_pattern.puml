@startuml
skinparam componentStyle rectangle

package "Distributed Transaction System" {
    component "API Gateway" as Gateway
    
    package "Transaction Coordinator" {
        component "Saga Orchestrator" as SagaOrchestrator
        component "2PC Coordinator" as TwoPCCoordinator
        component "Transaction Manager" as TxManager
        component "State Machine" as StateMachine
    }
    
    package "Message Queue" {
        component "Command Queue" as CommandQueue
        component "Compensation Queue" as CompensationQueue
        component "Event Queue" as EventQueue
    }
    
    package "Participant Services" {
        component "Order Service" as OrderService
        component "Payment Service" as PaymentService
        component "Inventory Service" as InventoryService
        component "Shipping Service" as ShippingService
    }
    
    package "Transaction Log" {
        component "Transaction States" as States
        component "Compensation Events" as CompEvents
    }
    
    package "Monitoring & Recovery" {
        component "Transaction Monitor" as TxMonitor
        component "Recovery Manager" as RecoveryManager
        component "Alert System" as AlertSystem
    }
}

cloud "Client Applications" as Clients
component "Service Databases" as ServiceDBs

Clients --> Gateway : Transaction Request
Gateway --> SagaOrchestrator : Initiate Transaction
SagaOrchestrator --> CommandQueue : Dispatch Commands
CommandQueue --> OrderService : Execute Operations
OrderService --> ServiceDBs : Update Data
AlertSystem --> SagaOrchestrator : Monitor Status

SagaOrchestrator --> CompensationQueue : Compensate
TwoPCCoordinator --> EventQueue : Coordinate

note right of SagaOrchestrator
  Manages saga workflow
  Handles compensations
end note

note right of TwoPCCoordinator
  Handles prepare phase
  Manages commit/rollback
end note

legend right
Implementation Details:
==
Saga Pattern:
- Event-driven choreography
- Compensation handling
- State machine tracking

2PC Implementation:
- Prepare phase timeout
- Participant management
- Recovery procedures

Consistency Guarantees:
- Eventually consistent
- Compensation tracking
- Idempotency support

Performance Features:
- Parallel execution
- Timeout management
- Retry mechanisms
end legend

@enduml