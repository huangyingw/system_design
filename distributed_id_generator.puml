@startuml
skinparam componentStyle rectangle

package "Distributed ID Generator System" {
    package "Client SDK" {
        component "ID Client" as IDClient
        component "Request Router" as RequestRouter
        component "Load Balancer" as LoadBalancer
        component "Cache Manager" as CacheManager
    }
    
    package "ID Generator Service" {
        component "ID Generator" as IDGenerator
        component "Snowflake Worker" as SnowflakeWorker
        component "Sequence Manager" as SequenceManager
        component "Clock Sync" as ClockSync
    }
    
    package "ZooKeeper Cluster" {
        component "Worker Registry" as WorkerRegistry
        component "Node Manager" as NodeManager
        component "Election Manager" as ElectionManager
    }
    
    package "Monitoring & Management" {
        component "Performance Monitor" as PerfMonitor
        component "ID Usage Tracker" as UsageTracker
        component "Alert System" as AlertSystem
    }
    
    package "Storage Layer" {
        component "ID Range Store" as RangeStore
        component "Usage Statistics" as UsageStats
        component "Audit Log" as AuditLog
    }
}

cloud "Client Applications" as Clients
cloud "Admin Console" as Admin

Clients --> IDClient : Request ID
IDClient --> RequestRouter : Route Request
RequestRouter --> LoadBalancer : Balance Load
LoadBalancer --> IDGenerator : Generate ID
IDGenerator --> SnowflakeWorker : Get Worker ID
SnowflakeWorker --> WorkerRegistry : Register/Heartbeat

IDGenerator --> ClockSync : Sync Time
ClockSync --> NodeManager : Get Global Time
SequenceManager --> RangeStore : Get/Update Range

Admin --> PerfMonitor : Monitor System
PerfMonitor --> UsageTracker : Track Usage
AlertSystem --> Admin : Send Alerts

note right of SnowflakeWorker
  41 bits for timestamp
  10 bits for worker ID
  12 bits for sequence
end note

note right of ClockSync
  NTP synchronization
  Clock drift detection
end note

legend right
Implementation Details:
==
Snowflake Algorithm:
- 64-bit unique IDs
- Time-based ordering
- Worker ID management
- Sequence handling

High Availability:
- Multiple worker nodes
- ZooKeeper coordination
- Automatic failover

Performance Features:
- Local caching
- Batch allocation
- Pre-generation

Monitoring:
- Usage tracking
- Performance metrics
- Clock drift detection
end legend

@enduml 