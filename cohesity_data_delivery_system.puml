@startuml
!theme plain
title Cohesity Data Delivery System - Security Integration Framework

' Custom styles
skinparam {
    backgroundColor #FAFAFA
    handwritten false
    defaultFontName Arial
    defaultFontSize 14
    componentStyle rectangle
    packageStyle rectangle
    padding 5
    nodesep 60
    ranksep 80
    
    component {
        backgroundColor #FFFFFF
        borderColor #666666
        FontSize 14
    }
    
    database {
        backgroundColor #FFFFFF
        borderColor #666666
        FontSize 14
    }
    
    queue {
        backgroundColor #FFFFFF
        borderColor #666666
        FontSize 14
    }
    
    note {
        backgroundColor #FAFAFA
        borderColor #666666
        FontSize 13
    }

    arrow {
        FontSize 13
    }
}

' Custom colors
!define ORANGE #FFA500
!define BLUE #4285F4
!define GREEN #34A853
!define RED #EA4335
!define PURPLE #9334E6
!define GRAY #7F8C8D

' Client Zone
actor "External Client" as client
component "Client SDK" as sdk

' Gateway & Auth
component "API Gateway" as gateway {
    component "Idempotency Handler" as idempotency
    component "Rate Limiter" as ratelimit
    component "Request Validator" as validator
}

component "Auth Service" as auth {
    component "Token Manager" as tokenMgr
    component "Encryption Service" as encrypt
}

' Data Services
component "Data Tracking Service" as tracker
component "Data Delivery Service" as sender
component "Reconciliation Service" as reconciliation

' Storage
database "Token Store\n(Redis)" as tokenDB
database "Delivery Records\n(PostgreSQL)" as deliveryDB
database "Source Data\n(S3)" as sourceDB
database "Cache\n(Redis)" as cache
database "Event Store" as eventStore

' Queue
queue "Kafka Queue" as queue {
    queue "Events Queue" as eventsQueue
    queue "Retry Queue" as retryQueue
    queue "DLQ" as deadLetterQueue
}

' Connections
client --> sdk : "Use"
sdk --> gateway : "1. Request with Token"
gateway --> auth : "2. Authenticate"
auth <--> tokenDB : "3. Validate Token"


tracker <--> deliveryDB : "4. Query History"
tracker <--> sourceDB : "5. Fetch New Data"
tracker --> queue : "6. Enqueue"
queue --> sender : "7. Process"
sender --> client : "8. Stream Data"
sender --> deliveryDB : "9. Update Status"
sender <--> cache : "10. Cache"

reconciliation --> eventStore : "11. Audit"
reconciliation --> deliveryDB : "12. Verify"

note right of reconciliation
  <b>Reconciliation Service</b>
  --
  • Data validation
  • Consistency checks
  • Discrepancy resolution
  • Audit logging
end note

note right of auth
  <b>Security Layer</b>
  --
  • E2E encryption
  • Token rotation
  • Access control
  • Audit logging
end note

note right of queue
  <b>Event Processing</b>
  --
  • Exactly-once delivery
  • Dead letter handling
  • Order preservation
  • Transaction boundaries
end note

@enduml 
