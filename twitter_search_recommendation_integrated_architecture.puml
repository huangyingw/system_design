@startuml Search_Recommendation_Architecture_Optimized

!define LIGHTYELLOW #FFFACD
!define LIGHTGREEN #90EE90
!define LIGHTRED #FFB6C1

skinparam backgroundColor #E6F3FF
skinparam shadowing false
skinparam RoundCorner 8
skinparam ArrowColor 454645
skinparam DefaultFontName Arial
skinparam DefaultFontSize 11

allowmixing

component "Geo-Load Balancer" as GeoLoadBalancer #FFFACD
component "API Gateway" as APIGateway #FFFACD

component "Auth Service" as AuthService #90EE90
component "Search Service" as SearchService #90EE90 {
    component "Request Handler" as RH
    component "Query Parser" as QP
    component "Spell Check & Auto-complete" as SCAC
    component "Cache Query" as CQ
    component "Index Query" as IQ
    component "Result Handler" as RHdl {
        component "Result Sorting & Filtering" as RSF
        component "Result Caching" as RC
    }
}
component "Recommendation Service" as RecommendationService #90EE90 {
    component "Recommendation Engine" as RE
    component "Result Caching" as REC
    component "Push Notification Service" as PNS
    component "Real-time Recommendation Engine" as RRE
}
component "Search Engine" as SearchEngine #FFB6C1
component "Data Analysis" as DataAnalysis #90EE90
component "Cache" as Cache #FFFACD {
    component "Search Result Cache" as SRC
    component "Recommendation Cache" as RCache
}
component "Database" as Database #FFFACD {
    component "User Interaction Data" as UID
    component "Content Data" as CD
}
component "Message Queue" as MessageQueue #FFFACD
component "Logging Service" as LoggingService #90EE90
component "Monitoring Service" as MonitoringService #90EE90
component "Batch Processing" as BatchProcessing #90EE90

' Relationships
GeoLoadBalancer -down-> APIGateway : "1. Global routing"
APIGateway -down-> AuthService : "2. Auth check"
APIGateway -down-> SearchService : "3. Search request"
APIGateway -down-> RecommendationService : "4. Recommendation request"
SearchService -right-> Cache : "5. Cache access"
SearchService -right-> SearchEngine : "6. Query/Index"
RecommendationService -left-> DataAnalysis : "7. Generate"
RecommendationService -left-> Cache : "8. Cache access"
DataAnalysis -down-> Database : "9. User data"
DataAnalysis -down-> MessageQueue : "10. Async tasks"
MessageQueue -down-> RecommendationService : "11. Process tasks"
RecommendationService -down-> BatchProcessing : "12. Trigger batch"
SearchService -down-> LoggingService : "13. Log searches"
RecommendationService -down-> LoggingService : "14. Log recommendations"
MonitoringService -up-> SearchService : "15. Monitor"
MonitoringService -up-> RecommendationService : "16. Monitor"
MonitoringService -up-> MessageQueue : "17. Monitor queue"
MonitoringService -up-> BatchProcessing : "18. Monitor jobs"

' Search Service Flow
RH -down-> QP : Parse query
QP -down-> SCAC : Check spelling & suggest
SCAC -down-> CQ : Query cache
CQ -right-> SRC : Read from cache
SRC -left-> CQ : Return results (Hit/Miss)
CQ -down-> IQ : Query index (if Cache Miss)
IQ -right-> SearchEngine : Query search engine
SearchEngine -left-> IQ : Return search results
IQ -up-> RSF : Sort & filter results
RSF -right-> RC : Cache results
RC -up-> SRC : Store in cache

' Recommendation Service Flow
RE -down-> UID : Fetch user data
RE -down-> CD : Fetch content data
RE -up-> REC : Cache recommendations
REC -down-> RCache : Store recommendations in cache
PNS -down-> RCache : Fetch recommendations from cache
PNS -right-> APIGateway : Push recommendations
RRE -down-> UID : Analyze real-time data
RRE -up-> REC : Update recommendations

note right of Cache
  Key: ProductID/TweetID
  Value: ProductDetails/TweetDetails
end note

note right of Database
  Indexed for fast retrieval
  Read-optimized
end note

note right of MessageQueue
  Async processing
  Horizontal scaling
end note

note left of GeoLoadBalancer
  Low latency routing
end note

note left of AuthService
  OAuth, JWT support
end note

note left of LoggingService
  Centralized logging
end note

note left of MonitoringService
  Real-time alerts
end note

note left of BatchProcessing
  Periodic large-scale analysis
end note

note right of SearchEngine
  Performance bottleneck:
  Optimize query processing
end note

note right of Database
  Scalability concern:
  Implement sharding
end note

note right of SearchService
  性能优化:
  - 使用缓存（Redis）减少重复查询
  - 使用Elasticsearch提高搜索查询速度
  - 查询解析和结果排序优化
end note

note right of SCAC
  提供拼写纠正和自动补全功能，
  改善用户搜索体验
end note

note right of RecommendationService
  性能优化:
  - 使用缓存减少推荐计算
  - 优化推荐算法
  - 增加推荐引擎计算资源
end note

note right of RRE
  基于用户实时行为进行推荐，
  提高推荐的时效性和准确性
end note

@enduml
