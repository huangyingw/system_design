@startuml
!pragma layout dot
allowmixing

skinparam backgroundColor #FAFAFA
skinparam componentStyle uml2
skinparam defaultFontSize 16
skinparam noteFontSize 14
skinparam arrowFontSize 14

rectangle "Uber System" as UberSystem {
    rectangle "Client Layer" as ClientLayer #E6E6FA {
        component "User App\n(Passenger)" as UserApp #D8BFD8
        component "Driver App\n(Driver)" as DriverApp #D8BFD8
        component "Web Interface" as WebInterface #D8BFD8
    }

    rectangle "API Gateway & Load Balancing" as APIGatewayLB #98FB98 {
        component "Global Load Balancer" as GLB #90EE90
        component "Regional Load Balancers" as RLB #90EE90
        component "API Gateway" as APIGateway #90EE90
        component "Rate Limiter" as RateLimiter #90EE90
        component "Authentication" as Auth #90EE90
    }

    rectangle "Microservices" as Microservices #ADD8E6 {
        component "User Service" as UserService #87CEFA
        component "Driver Service" as DriverService #87CEFA
        component "Trip Service" as TripService #87CEFA
        component "Payment Service" as PaymentService #87CEFA
        component "Notification Service" as NotificationService #87CEFA
        component "Analytics Service" as AnalyticsService #87CEFA
    }

    rectangle "Core Services" as CoreServices #FFA07A {
        component "Geolocation Service" as Geolocation #FA8072
        component "Trip Matcher" as Matcher #FA8072
        component "Real-time Location Tracker" as LocationTracker #FA8072
        component "Pricing Engine" as PricingEngine #FA8072
    }

    rectangle "Data Storage Layer" as DataStorageLayer #DDA0DD {
        database "User DB\n(Sharded)" as UserDB #D8BFD8
        database "Driver DB\n(Sharded)" as DriverDB #D8BFD8
        database "Trip DB\n(Sharded)" as TripDB #D8BFD8
        database "Payment DB\n(Sharded)" as PaymentDB #D8BFD8
        database "Analytics DB" as AnalyticsDB #D8BFD8
        queue "Kafka Cluster" as KafkaCluster #D8BFD8
        database "Redis Cluster" as RedisCluster #D8BFD8
    }

    rectangle "Infrastructure" as Infrastructure #F0E68C {
        component "Service Discovery" as ServiceDiscovery #EEE8AA
        component "Config Management" as ConfigManagement #EEE8AA
        component "Logging & Monitoring" as LoggingMonitoring #EEE8AA
        component "CI/CD Pipeline" as CICD #EEE8AA
    }
}

ClientLayer -[#000000,thickness=2]down-> APIGatewayLB : <back:#FFFFFF><color:#000000>1. Requests</color></back>
APIGatewayLB -[#000000,thickness=2]down-> Microservices : <back:#FFFFFF><color:#000000>2. Route</color></back>
Microservices -[#0000FF,thickness=2]right-> CoreServices : <back:#FFFFFF><color:#0000FF>3. Core ops</color></back>
Microservices -[#008000,thickness=2]down-> DataStorageLayer : <back:#FFFFFF><color:#008000>4. Data ops</color></back>
CoreServices -[#008000,thickness=2]down-> DataStorageLayer : <back:#FFFFFF><color:#008000>5. R/W data</color></back>
Microservices -[#FF0000,thickness=2]left-> Infrastructure : <back:#FFFFFF><color:#FF0000>6. Use infra</color></back>
CoreServices -[#FF0000,thickness=2]left-> Infrastructure : <back:#FFFFFF><color:#FF0000>7. Use infra</color></back>

note right of DataStorageLayer
  Sharding:
  - User DB: by user_id
  - Driver DB: by driver_id
  - Trip DB: by trip_id
  - Payment DB: by payment_id
  Redis: Caching, Real-time data
  Kafka: Event streaming
endnote

note bottom of UberSystem
Optimization suggestions:
1. DB read replicas
2. CDN for static assets
3. Query optimization
4. Horizontal scaling
5. Multi-level caching
6. Geospatial query optimization
7. Async processing
8. Circuit breakers
endnote

@enduml
