@startuml
!define RECTANGLE class
!define DATABASE database

' Enable mixing of elements
allowmixing

' Increase image resolution
scale 2

' Global style settings
skinparam backgroundColor #FFFFFF
skinparam packageStyle rectangle
skinparam linetype ortho

' Font settings
skinparam defaultFontName Arial
skinparam defaultFontSize 16
skinparam defaultFontColor #000000
skinparam noteFontSize 14
skinparam arrowColor #454545

' Make fonts bold
skinparam defaultFontStyle bold

' Component colors
skinparam rectangle {
    BackgroundColor #E0E0E0
    BorderColor #454545
    FontColor #000000
}

skinparam database {
    BackgroundColor #D0D0D0
    BorderColor #454545
    FontColor #000000
}

skinparam note {
    BackgroundColor #FFFACD
    BorderColor #454545
    FontColor #000000
}

skinparam package {
    BackgroundColor #F0F0F0
    BorderColor #454545
    FontColor #000000
}

package "Uber System" {
    RECTANGLE "Backend Server\n(APIs & Core Logic)" as Backend

    package "Data Storage Layer" {
        package "Orders Database Cluster" {
            DATABASE "Orders Primary DB" as OrdersPrimary
            DATABASE "Orders Read Replica 1" as OrdersReplica1
            DATABASE "Orders Read Replica 2" as OrdersReplica2
        }
        
        package "User Database Cluster" {
            DATABASE "Users Primary DB" as UsersPrimary
            DATABASE "Users Read Replica 1" as UsersReplica1
            DATABASE "Users Read Replica 2" as UsersReplica2
        }
        
        package "Driver Location Database" {
            DATABASE "Location Primary DB" as LocationPrimary
            DATABASE "Location Read Replica 1" as LocationReplica1
        }
        
        package "Trip Records Database Cluster" {
            DATABASE "Trip Primary DB" as TripPrimary
            DATABASE "Trip Read Replica 1" as TripReplica1
            DATABASE "Trip Read Replica 2" as TripReplica2
        }
        
        RECTANGLE "Redis Cluster\n(Real-time Data Cache)" as RedisCluster
    }
    
    Backend -down-> "Data Storage Layer" : Queries/Updates
}

note right of Backend
    <b>Performance Optimizations:</b>
    • Read replicas for read-heavy ops
    • Redis caching for frequent data
    • Database indexing
    • Database sharding
    • Asynchronous processing
end note

note left of "Data Storage Layer"
    <b>Potential Bottlenecks:</b>
    • Peak hour write operations
    • Real-time location updates
    • Complex cross-database queries
    • High-volume data ingestion
end note

note bottom of "Data Storage Layer"
    <b>Scalability Strategies:</b>
    • Horizontal database scaling
    • Caching layer implementation
    • Message queues for async processing
    • Microservices architecture
    • CDNs for static content
end note

@enduml
