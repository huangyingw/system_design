@startuml
!define Table(name,desc) class name as "desc" << (T,#FFAAAA) >>
!define pk(x) <b><color:red>PK: </color>x</b>
!define fk(x) <color:green>FK: </color>x
!define unique(x) <color:blue>UQ: </color>x
!define index(x) <color:purple>IDX: </color>x
!define sharding_key(x) <color:orange>Sharding Key: </color>x

skinparam class {
    BackgroundColor #EEEEEE
    ArrowColor #222222
    BorderColor #000000
}
skinparam linetype ortho
skinparam backgroundColor #E0E0E0

' MongoDB Collections
Table(urls, "urls") {
    pk(_id: ObjectId)
    sharding_key(short_code: String)
    original_url: String
    index(created_at: Date)
    index(user_id: ObjectId)
    visits_count: Int
    is_active: Boolean
}

Table(users, "users") {
    pk(_id: ObjectId)
    username: String
    email: String
    unique(email)
    password_hash: String
    created_at: Date
    last_login: Date
}

Table(visits, "visits") {
    pk(_id: ObjectId)
    sharding_key(url_id: ObjectId)
    fk(url_id: ObjectId)
    visitor_ip: String
    user_agent: String
    referer: String
    timestamp: Date
    index(timestamp)
}

' Redis Key-Value Structures
class "Redis Keys" as redis_keys << (R,#AAFFAA) >> {
    "short_code:{short_code}" -> "original_url"
    "url_visits:{short_code}" -> "visit_count"
    "user_urls:{user_id}" -> "Set of short_codes"
}

urls -- users : "belongs to"
urls -- visits : "has many"
urls .. redis_keys : "cached in"

@enduml
