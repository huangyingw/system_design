@startuml
!define RECTANGLE class

skinparam backgroundColor #FAFAFA
skinparam linetype ortho
skinparam padding 8
skinparam roundcorner 15

skinparam rectangle {
    BackgroundColor<< Frontend >> #E1F5FE
    BackgroundColor<< Cache >> #FFEBEE
    BackgroundColor<< Database >> #E8F5E9
    BackgroundColor<< Queue >> #FFF3E0
    BorderColor #78909C
    FontColor #37474F
}

skinparam arrow {
    Color #78909C
    FontColor #37474F
}

rectangle "Client" as Client << Frontend >>
rectangle "CDN" as CDN << Frontend >>

rectangle "Load Balancer" as LoadBalancer {
    rectangle "API Servers" as APIServers {
        rectangle "API Server 1" as API1
        rectangle "API Server 2" as API2
        rectangle "API Server 3" as API3
    }
}

rectangle "Redis Cluster" as RedisCluster << Cache >> {
    rectangle "Redis Master" as RedisMaster
    rectangle "Redis Slave 1" as RedisSlave1
    rectangle "Redis Slave 2" as RedisSlave2
}

rectangle "MongoDB Cluster" as MongoDBCluster << Database >> {
    rectangle "MongoDB Router\n(MongoS)" as MongoRouter
    rectangle "Config Servers" as ConfigServers
    rectangle "Shard 1" as Shard1
    rectangle "Shard 2" as Shard2
}

rectangle "Message Queue" as MessageQueue << Queue >>
rectangle "Background Worker" as BackgroundWorker

Client -down-> CDN : 1. Static resource request
Client -down-> LoadBalancer : 2. API request
LoadBalancer -down-> APIServers : 3. Distribute requests
APIServers -right-> RedisCluster : 4. Cache read/write
APIServers -down-> MongoDBCluster : 5. DB read/write
APIServers -left-> MessageQueue : 6. Async tasks
BackgroundWorker -up-> MessageQueue : 7. Process tasks
BackgroundWorker -right-> MongoDBCluster : 8. Update data

note right of LoadBalancer #E1F5FE
    Read/Write Separation:
    - Read requests prioritized to Redis cluster
    - Write requests sent directly to MongoDB cluster
    - Majority of requests are reads (URL redirections)
end note

note right of RedisCluster #FFEBEE
    Caching Strategy:
    - Prioritize reading short URL mappings from Redis
    - On cache miss, read from MongoDB and update cache
    - Write operations update both Redis and MongoDB
end note

note right of MongoDBCluster #E8F5E9
    Sharding Strategy:
    - Shard based on short URL hash
    - Read operations distributed across shards
    - Write operations routed through MongoDB Router
end note

note left of MessageQueue #FFF3E0
    Message Queue Usage:
    1. Asynchronous processing of visit statistics
    2. Periodic cleanup of expired short URLs
    3. Generation of analytical reports
    4. Handling of long-running background tasks
end note

note bottom of APIServers #E1F5FE
    API Server Responsibilities:
    1. Handle short URL creation requests (write operations)
    2. Process short URL redirection requests (read operations)
    3. Implement caching strategy and read/write separation logic
end note

@enduml
