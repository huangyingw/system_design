@startuml Real-time News Feed Architecture

!define RECTANGLE class
skinparam backgroundColor #F0F0F0
skinparam handwritten false
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam arrowColor #033277
skinparam arrowThickness 1.5
skinparam packageBackgroundColor #E0E0E0

allowmixing

actor "User" as user

rectangle "Client" {
    component "Consumer App" as consumer
    component "Push Notification\nService" as push
    component "WebSocket Service" as websocket
}

rectangle "Server" {
    component "API Gateway" as api_gateway
    component "Auth Service" as auth
    component "Feed Producer" as producer
    queue "Message Queue" as mq
    
    rectangle "Backend Services" {
        component "Feed Service" as feed
        component "Recommendation\nEngine" as rec
        component "User Preferences\nService" as pref
        component "Logging &\nMonitoring" as log
    }
    
    database "Storage" {
        component "Distributed Cache" as cache
        component "NoSQL Database" as db
    }
}

user -[#red]-> consumer : 1. Request/Publish
consumer -[#red]-> api_gateway : 2. Send Request
api_gateway -[#orange]-> auth : 3. Authenticate
auth -[#orange]-> api_gateway : 4. Auth Result
api_gateway -[#green]-> producer : 5. Forward
producer -[#green]-> mq : 6. Send to Queue

mq -[#blue]-> feed : 7. Deliver
feed -[#blue]-> rec : 8. Personalize
feed -[#blue]-> pref : 9. Get Preferences
feed -[#purple]-> log : 10. Log
feed -[#purple]-> cache : 11. Cache Hot Feeds
feed -[#purple]-> db : 12. Store Feeds

consumer -[#red]-> api_gateway : 13. Request Latest
api_gateway -[#green]-> feed : 14. Request Feeds
feed -[#blue]-> cache : 15. Get Hot Feeds
feed -[#blue]-> db : 16. Get Older Feeds

feed -[#orange]-> websocket : 17. Push via WebSocket
feed -[#orange]-> push : 18. Send Push
websocket -[#orange]-> consumer : 19. Real-time Feed
push -[#orange]-> consumer : 20. Notify

note right of cache
  key: value pairs
  for quick access
end note

note bottom of mq
  Potential bottleneck
  Consider horizontal scaling
  or using a distributed queue system
end note

note right of rec
  CPU intensive
  Consider caching recommendations
  and using machine learning models
end note

note bottom of Server
  Scalability:
  - Use load balancers for API Gateway and services
  - Implement microservices architecture
  - Use containerization (e.g., Docker) for easy scaling
end note

@enduml
