@startuml Container Orchestration System Design

skinparam backgroundColor #FAFAFA
skinparam handwritten false
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam roundcorner 20
skinparam shadowing true

title Container Orchestration System Design (Based on Kubernetes)

' User Interaction
rectangle "User Interaction" as UserInteraction {
    component "kubectl CLI"
    component "Web UI"
    component "API Client"
}

' Control Plane
rectangle "Control Plane" as ControlPlane {
    rectangle "API Server" as APIServer {
        component "Authentication"
        component "Authorization"
        component "Admission Control"
    }
    rectangle "Scheduler" as Scheduler {
        component "Node Selection"
        component "Resource Allocation"
    }
    rectangle "Controller Manager" as ControllerManager {
        component "Replication Controller"
        component "Node Controller"
        component "Service Controller"
    }
    database "etcd" as ETCD {
        component "Cluster State"
        component "Configuration Data"
    }
}

' Worker Nodes
rectangle "Worker Nodes" as WorkerNodes {
    rectangle "Node 1" as Node1 {
        component "kubelet"
        component "Container Runtime"
        component "kube-proxy"
    }
    rectangle "Node 2" as Node2 {
        component "kubelet"
        component "Container Runtime"
        component "kube-proxy"
    }
    rectangle "Node N" as NodeN {
        component "kubelet"
        component "Container Runtime"
        component "kube-proxy"
    }
}

' Networking
rectangle "Networking" as Networking {
    component "CNI Plugin"
    component "Service Network"
    component "Pod Network"
}

' Storage
rectangle "Storage" as Storage {
    component "CSI Plugin"
    component "Persistent Volumes"
    component "Storage Classes"
}

' Monitoring and Logging
rectangle "Monitoring and Logging" as Monitoring {
    component "Prometheus"
    component "Grafana"
    component "ELK Stack"
}

' Security
rectangle "Security" as Security {
    component "RBAC"
    component "Network Policies"
    component "Secret Management"
}

' Connections
UserInteraction -down-> APIServer : Request
APIServer <-right-> ETCD : Read/Write State
Scheduler -up-> APIServer : Listen/Update
ControllerManager -up-> APIServer : Listen/Update
APIServer -down-> WorkerNodes : Manage
Networking -up-> WorkerNodes : Provide Network
Storage -up-> WorkerNodes : Provide Storage
Monitoring -up-> ControlPlane : Monitor
Monitoring -up-> WorkerNodes : Monitor
Security -up-> ControlPlane : Protect
Security -up-> WorkerNodes : Protect

note right of ControlPlane
  Control Plane Responsibilities:
  1. API Server: Unified entry point for the cluster
  2. Scheduler: Decides Pod deployment location
  3. Controller: Maintains desired state
  4. etcd: Stores cluster state and configuration
end note

note left of WorkerNodes
  Worker Node Components:
  1. kubelet: Manages containers on the node
  2. Container Runtime: Runs containers (e.g., Docker)
  3. kube-proxy: Manages network rules
end note

note bottom of Networking
  Network Functions:
  1. Pod-to-Pod communication
  2. Service abstraction
  3. Load balancing
  4. Network policies
end note

@enduml
