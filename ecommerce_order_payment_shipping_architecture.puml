@startuml Order Payment and Shipping System Architecture

skinparam backgroundColor #F0F0F0
allowmixing
!pragma layout dot

rectangle "E-commerce System" {
    rectangle "API Gateway" as apiGateway #A9CCE3
    
    rectangle "Order Domain" {
        component "Order Service" as orderService #D6EAF8
        component "Order Cache" as orderCache #D6EAF8
        component "Order Database" as orderDB #D6DBDF
    }
    
    rectangle "Payment Domain" {
        component "Payment Service" as paymentService #D5F5E3
        component "Payment Gateway" as paymentGateway #D5F5E3
        component "Fraud Detection" as fraudDetection #F5B7B1
        component "Payment Database" as paymentDB #D6DBDF
    }
    
    rectangle "Inventory Domain" {
        component "Inventory Service" as inventoryService #FAD7A0
        component "Inventory Cache" as inventoryCache #FAD7A0
        component "Inventory Database" as inventoryDB #D6DBDF
    }
    
    rectangle "Shipping Domain" {
        component "Shipping Service" as shippingService #D7BDE2
        component "Shipping Database" as shippingDB #D6DBDF
    }
    
    rectangle "Notification Domain" {
        component "Notification Service" as notificationService #AED6F1
    }
    
    rectangle "Message Queue" as messageQueue #F9E79F
}

actor "Customer" as customer
actor "Merchant" as merchant

customer -[#4CAF50,thickness=2]-> apiGateway : <color:#4CAF50>1. Place Order</color>
apiGateway -[#2196F3,thickness=2]-> orderService : <color:#2196F3>2. Process Order</color>
orderService -[#FF5722,thickness=2]-> inventoryService : <color:#FF5722>3. Check Stock</color>
inventoryService -[#9C27B0,thickness=2]-> inventoryCache : <color:#9C27B0>4. Verify Inventory</color>
orderService -[#795548,thickness=2]-> paymentService : <color:#795548>5. Initiate Payment</color>
paymentService -[#FFC107,thickness=2]-> fraudDetection : <color:#FFC107>6. Check for Fraud</color>
paymentService -[#00BCD4,thickness=2]-> paymentGateway : <color:#00BCD4>7. Process Payment</color>
paymentGateway -[#E91E63,thickness=2]-> paymentService : <color:#E91E63>8. Payment Result</color>
paymentService -[#9E9E9E,thickness=2]-> orderService : <color:#9E9E9E>9. Confirm Payment</color>
orderService -[#3F51B5,thickness=2]-> messageQueue : <color:#3F51B5>10. Order Confirmed</color>
messageQueue -[#009688,thickness=2]-> shippingService : <color:#009688>11. Create Shipment</color>
shippingService -[#FF9800,thickness=2]-> shippingDB : <color:#FF9800>12. Update Shipping Status</color>
messageQueue -[#8BC34A,thickness=2]-> notificationService : <color:#8BC34A>13. Send Notifications</color>
notificationService -[#607D8B,thickness=2]-> customer : <color:#607D8B>14. Notify Customer</color>
shippingService -[#673AB7,thickness=2]-> merchant : <color:#673AB7>15. Shipping Instructions</color>

note right of apiGateway
Performance Optimization:
• Implement rate limiting
• Use caching for frequently accessed data
• Load balancing for horizontal scaling
end note

note right of orderService
Performance Optimization:
• Use distributed caching (Redis)
• Implement CQRS pattern
• Event sourcing for order history
end note

note right of inventoryService
Performance Optimization:
• Real-time inventory updates with cache
• Eventual consistency for non-critical updates
• Optimize database queries and indexing
end note

note right of paymentService
Performance Optimization:
• Implement circuit breaker pattern
• Use connection pooling
• Asynchronous processing for non-critical operations
end note

note bottom of shippingService
Performance Optimization:
• Batch processing for shipments
• Caching for shipping rates and tracking info
• Asynchronous updates to shipping status
end note

note bottom of notificationService
Performance Optimization:
• Use message queue for async processing
• Implement rate limiting
• Batch notifications where possible
end note

note bottom of messageQueue
Message Types:
• OrderCreated
• PaymentProcessed
• InventoryUpdated
• ShipmentCreated
• NotificationSent
end note

note right of messageQueue
Message Structure:
{
  "type": "EventType",
  "timestamp": "ISO8601 DateTime",
  "payload": {
    // Event-specific data
  }
}
end note

@enduml
