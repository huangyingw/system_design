@startuml Seckill System Data Layer Architecture
!pragma layout smetana
skinparam backgroundColor #FFFFFF
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam roundcorner 20
skinparam shadowing false

title Seckill System Data Layer Architecture

rectangle "Data Access Layer" as DataAccessLayer #FFB6C1 {
    component "ORM" as ORM
    component "Connection Pool" as ConnectionPool
    component "Query Optimizer" as QueryOptimizer
}

rectangle "Database Sharding" as DatabaseSharding #FFB6C1 {
    component "Shard 1" as Shard1
    component "Shard 2" as Shard2
    component "Shard 3" as Shard3
}

rectangle "Database Optimization" as DatabaseOptimization #FFB6C1 {
    component "Indexing" as Indexing
    component "Query Optimization" as QueryOpt
    component "Data Partitioning" as DataPartitioning
}

rectangle "Cache" as Cache #00FFFF {
    component "Redis" as Redis
    component "Memcached" as Memcached
}

rectangle "Persistent Storage" as PersistentStorage #90EE90 {
    database "Master DB" as MasterDB
    database "Slave DB 1" as SlaveDB1
    database "Slave DB 2" as SlaveDB2
}

DataAccessLayer -down-> DatabaseSharding : "1. Route queries"
DatabaseSharding -down-> PersistentStorage : "2. Store/Retrieve data"
DataAccessLayer <--> Cache : "3. Cache operations"
DatabaseOptimization -up-> DataAccessLayer : "4. Optimize queries"

MasterDB -right-> SlaveDB1 : "5. Replicate"
MasterDB -right-> SlaveDB2 : "6. Replicate"

note right of DatabaseSharding
  Sharding strategy:
  - By user_id for user data
  - By product_id for inventory
end note

note right of Cache
  Multi-level caching:
  - L1: Local cache
  - L2: Distributed cache
end note

note bottom of PersistentStorage
  Master-slave replication
  for read scalability
end note

@enduml
