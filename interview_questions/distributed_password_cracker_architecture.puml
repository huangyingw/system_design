@startuml
!pragma layout dot
allowmixing
skinparam backgroundColor #F0F0F0

title Optimized Distributed Password Cracker System Architecture
caption Enhanced system for recovering a lost Threads account password

rectangle "Private Cloud Infrastructure" as PrivateCloud #E6F3FF {
    component "Central Coordination Node" as Coordinator #87CEFA
    
    rectangle "Apache Spark Cluster" as SparkCluster #FFE6CC {
        component "Distributed Producer Node 1" as DistProducer1 #FFA07A
        component "Distributed Producer Node 2" as DistProducer2 #FFA07A
        component "Kubernetes Autoscaler" as Autoscaler #98FB98
        component "Dynamic Consumer Node" as DynamicConsumer #F0E68C
    }
    
    component "Central Pub/Sub Messaging System" as PubSub #DDA0DD
    component "Load Balancer" as LoadBalancer #20B2AA
    component "Caching Layer" as Cache #FF69B4
    note right of Cache
        key: attempted_passwords
        value: API_response
    end note
}

rectangle "Free Compute Resources" as FreeResources #E6E6FA {
    component "Consumer Node 1" as FreeConsumer1 #87CEEB
    component "Consumer Node 2" as FreeConsumer2 #87CEEB
}

component "RESTful Thread API" as API #FF6347
component "Monitoring & Logging" as Monitoring #7B68EE

Coordinator -[#0000FF,thickness=2]right-> DistProducer1 : <back:#FFFFFF><color:#0000FF>1. Assign Range & Manage</color></back>
Coordinator -[#0000FF,thickness=2]right-> DistProducer2 : <back:#FFFFFF><color:#0000FF>1. Assign Range & Manage</color></back>
Coordinator -[#800080,thickness=2]down-> PubSub : <back:#FFFFFF><color:#800080>2. System Management & Configuration</color></back>

DistProducer1 -[#008000,thickness=2]down-> PubSub : <back:#FFFFFF><color:#008000>3. Publish Passwords</color></back>
DistProducer2 -[#008000,thickness=2]down-> PubSub : <back:#FFFFFF><color:#008000>3. Publish Passwords</color></back>

PubSub -[#FFA500,thickness=2]down-> LoadBalancer : <back:#FFFFFF><color:#FFA500>4. Distribute Workload</color></back>

LoadBalancer -[#FF1493,thickness=2]down-> FreeConsumer1 : <back:#FFFFFF><color:#FF1493>5. Assign Tasks</color></back>
LoadBalancer -[#FF1493,thickness=2]down-> FreeConsumer2 : <back:#FFFFFF><color:#FF1493>5. Assign Tasks</color></back>
LoadBalancer -[#FF1493,thickness=2]right-> DynamicConsumer : <back:#FFFFFF><color:#FF1493>5. Assign Tasks</color></back>

FreeConsumer1 -[#4B0082,thickness=2]down-> Cache : <back:#FFFFFF><color:#4B0082>6. Check Cache</color></back>
FreeConsumer2 -[#4B0082,thickness=2]down-> Cache : <back:#FFFFFF><color:#4B0082>6. Check Cache</color></back>
DynamicConsumer -[#4B0082,thickness=2]left-> Cache : <back:#FFFFFF><color:#4B0082>6. Check Cache</color></back>

Cache -[#8B4513,thickness=2]down-> API : <back:#FFFFFF><color:#8B4513>7. Validate Password (if not in cache)</color></back>

API -[#DAA520,thickness=2]up-> Cache : <back:#FFFFFF><color:#DAA520>8. Update Cache</color></back>

Cache -[#2E8B57,thickness=2]up-> FreeConsumer1 : <back:#FFFFFF><color:#2E8B57>9. Return Result</color></back>
Cache -[#2E8B57,thickness=2]up-> FreeConsumer2 : <back:#FFFFFF><color:#2E8B57>9. Return Result</color></back>
Cache -[#2E8B57,thickness=2]right-> DynamicConsumer : <back:#FFFFFF><color:#2E8B57>9. Return Result</color></back>

Autoscaler -[#FF4500,thickness=2]down-> PubSub : <back:#FFFFFF><color:#FF4500>10. Monitor Queue Length</color></back>
Autoscaler -[#1E90FF,thickness=2]right-> DistProducer1 : <back:#FFFFFF><color:#1E90FF>11. Scale In/Out</color></back>
Autoscaler -[#1E90FF,thickness=2]right-> DistProducer2 : <back:#FFFFFF><color:#1E90FF>11. Scale In/Out</color></back>
Autoscaler -[#1E90FF,thickness=2]down-> DynamicConsumer : <back:#FFFFFF><color:#1E90FF>11. Scale In/Out</color></back>

Coordinator -[#FF0000,thickness=2]-> Monitoring : <back:#FFFFFF><color:#FF0000>12. Log & Monitor</color></back>
PubSub -[#FF0000,thickness=2]-> Monitoring : <back:#FFFFFF><color:#FF0000>12. Log & Monitor</color></back>
LoadBalancer -[#FF0000,thickness=2]-> Monitoring : <back:#FFFFFF><color:#FF0000>12. Log & Monitor</color></back>
Cache -[#FF0000,thickness=2]-> Monitoring : <back:#FFFFFF><color:#FF0000>12. Log & Monitor</color></back>

note right of API
    Performance bottleneck:
    Implement rate limiting
    and consider caching
    frequent API responses
end note

note bottom of Cache
    Optimization:
    Use distributed cache
    for better performance
    and scalability
end note

@enduml
