@startuml
skinparam backgroundColor #D3D3D3

!define KafkaNode(x) class x << (K,orchid) >>
!define ZookeeperNode(x) class x << (Z,yellow) >>
!define ProducerNode(x) class x << (P,blue) >>
!define ConsumerNode(x) class x << (C,red) >>
!define PartitionNode(x) class x << (PT,green) >>

package "Kafka Cluster" {
    KafkaNode(Broker1)
    KafkaNode(Broker2)
}

ZookeeperNode(Zookeeper)
ProducerNode(Producer1)
ProducerNode(Producer2)
ConsumerNode(Consumer1)
ConsumerNode(Consumer2)

class Topic1 << (T,purple) >>
class Topic2 << (T,purple) >>

PartitionNode(Partition1_1)
PartitionNode(Partition1_2)
PartitionNode(Partition2_1)
PartitionNode(Partition2_2)

Topic1 -down-> Partition1_1 : contains
Topic1 -down-> Partition1_2 : contains
Topic2 -down-> Partition2_1 : contains
Topic2 -down-> Partition2_2 : contains

Producer1 -right-> Topic1 : writes to
Producer2 -right-> Topic2 : writes to

Partition1_1 -right-> Broker1 : held by
Partition1_2 -right-> Broker1 : held by
Partition2_1 -right-> Broker2 : held by
Partition2_2 -right-> Broker2 : held by

Broker1 -up-> Zookeeper : registers with / monitored by
Broker2 -up-> Zookeeper : registers with / monitored by

Consumer1 -left-> Partition1_1 : reads from
Consumer1 -left-> Partition1_2 : reads from
Consumer2 -left-> Partition2_1 : reads from
Consumer2 -left-> Partition2_2 : reads from

@enduml
