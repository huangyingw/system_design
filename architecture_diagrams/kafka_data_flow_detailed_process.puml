@startuml
skinparam backgroundColor #E8E8E8

' Define components
rectangle "Producer" as Producer #4CAF50
rectangle "Broker Cluster" as BrokerCluster {
    rectangle "Broker 1" as Broker1 #FF9800
    rectangle "Broker 2" as Broker2 #FF9800
    rectangle "Broker 3" as Broker3 #FF9800
}
rectangle "ZooKeeper Ensemble" as ZooKeeper #9C27B0
rectangle "Consumer Group" as ConsumerGroup {
    rectangle "Consumer 1" as Consumer1 #2196F3
    rectangle "Consumer 2" as Consumer2 #2196F3
}
rectangle "Schema Registry" as SchemaRegistry #E91E63
rectangle "Monitoring & Metrics" as Monitoring #795548

' Define connections
Producer -[#4CAF50,thickness=2]-> Broker1 : 1. Send Message
Producer -[#4CAF50,dashed]-> SchemaRegistry : 2. Validate Schema
Broker1 -[#FF9800,thickness=2]-> Broker2 : 3. Replicate
Broker1 -[#FF9800,thickness=2]-> Broker3 : 4. Replicate
Broker1 -[#2196F3,thickness=2]-> Consumer1 : 5. Fetch
Broker2 -[#2196F3,thickness=2]-> Consumer2 : 6. Fetch
ZooKeeper -[#9C27B0,dashed]-> BrokerCluster : 7. Manage Metadata
ZooKeeper -[#9C27B0,dashed]-> ConsumerGroup : 8. Coordinate
Monitoring -[#795548,dashed]-> BrokerCluster : 9. Collect Metrics
Monitoring -[#795548,dashed]-> ConsumerGroup : 10. Collect Metrics

' Add notes
note top of Producer
    Producers send messages to specified topics
    Can choose synchronous or asynchronous sending
end note

note bottom of BrokerCluster
    Messages are partitioned and replicated across brokers
    Ensures high availability and fault tolerance
end note

note bottom of ConsumerGroup
    Consumers fetch messages from brokers
    Supports various consumption modes
end note

note right of SchemaRegistry
    Manages and validates message schemas
    Ensures data compatibility
end note

note right of ZooKeeper
    Manages cluster metadata
    Coordinates Brokers and Consumers
end note

note left of Monitoring
    Monitors system performance and health
    Collects key metrics
end note

@enduml
