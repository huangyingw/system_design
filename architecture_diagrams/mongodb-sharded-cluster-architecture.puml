@startuml
!define MONGOS(x) class x << (M,#FFAAFF) >>
!define CONFIG(x) class x << (C,#FFFFAA) >>
!define SHARD(x) class x << (S,#AAAAFF) >>
!define REPLICA(x) class x << (R,#AAFFAA) >>
!define COLLECTION(x) class x << (D,#FFAAAA) >>

skinparam backgroundColor #F0F0F0
skinparam linetype ortho
skinparam padding 5
skinparam roundcorner 10

' MongoDB Architecture Components
MONGOS(MongosRouter) {
  + Load Balancing
  + Query Routing
}
together {
  CONFIG(ConfigServer1)
  CONFIG(ConfigServer2)
  CONFIG(ConfigServer3)
}
together {
  SHARD(Shard1)
  SHARD(Shard2)
}

' Replica Sets
together {
  REPLICA(Shard1_Primary)
  REPLICA(Shard1_Secondary1)
  REPLICA(Shard1_Secondary2)
}
together {
  REPLICA(Shard2_Primary)
  REPLICA(Shard2_Secondary1)
  REPLICA(Shard2_Secondary2)
}

' MongoDB Collections
COLLECTION(User) {
  +_id : ObjectId {PK}
  +username : String {Index, Shard Key}
  +email : String {Index}
  +password : String
}
COLLECTION(Product) {
  +_id : ObjectId {PK, Shard Key}
  +name : String {Index}
  +description : String
  +price : Decimal
}
COLLECTION(Order) {
  +_id : ObjectId {PK}
  +user_id : ObjectId {Index, Compound Shard Key}
  +product_id : ObjectId {Index}
  +order_date : DateTime {Index, Compound Shard Key}
  +quantity : Int
}

' Collections in Shards
Shard1_Primary -[hidden]down- User
Shard1_Primary -[hidden]down- Order
Shard2_Primary -[hidden]down- Product

' Replica Set Relationships
Shard1 -down-> Shard1_Primary
Shard1 -down-> Shard1_Secondary1
Shard1 -down-> Shard1_Secondary2
Shard2 -down-> Shard2_Primary
Shard2 -down-> Shard2_Secondary1
Shard2 -down-> Shard2_Secondary2

' MongoDB Relationships
MongosRouter -down-> ConfigServer1
MongosRouter -down-> ConfigServer2
MongosRouter -down-> ConfigServer3
MongosRouter -down-> Shard1
MongosRouter -down-> Shard2

note right of MongosRouter
  Performance Optimizations:
  - Use appropriate shard keys
  - Implement caching strategies
  - Optimize indexes
  - Use write concerns wisely
end note

note right of Shard1
  Scaling Strategy:
  - Horizontal scaling by adding more shards
  - Vertical scaling by upgrading hardware
end note

note right of User
  Shard Key Strategy:
  - Username as shard key for even distribution
  - Consider compound shard key if needed
end note

note right of Order
  Compound Shard Key:
  - user_id + order_date for date-based sharding
  - Enables efficient range queries
end note

@enduml
