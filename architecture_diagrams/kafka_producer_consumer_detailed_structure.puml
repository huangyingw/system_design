@startuml
skinparam backgroundColor #F5F5F5
skinparam packageStyle rectangle
skinparam linetype ortho

package "Kafka System" {

    package "Producer Components" {
        class Producer << (P,blue) >> {
            Sends messages to the broker
        }
        class ProducerInterceptor << (P,blue) >> {
            Intercepts messages
            Performs operations before and after sending messages
        }
        class Serializer << (P,blue) >> {
            Serializes objects
            Converts objects to byte arrays
        }
        class Partitioner << (P,blue) >> {
            Determines message partition
        }
        class RecordAccumulator << (P,blue) >> {
            Collects and batches messages
        }
        class Sender << (P,blue) >> {
            Fetches messages from the accumulator
            Sends messages to the broker
        }

        Producer --> ProducerInterceptor : uses
        ProducerInterceptor --> Serializer : uses
        Serializer --> Partitioner : uses
        Partitioner --> RecordAccumulator : uses
        RecordAccumulator --> Sender : uses
    }

    package "Broker" {
        class Broker << (K,orchid) >> {
            Receives and stores messages
        }
        
        Sender --> Broker : sends messages
    }

    package "Consumer Components" {
        class Consumer << (C,red) >> {
            Pulls messages from the broker
        }
        class Coordinator << (C,red) >> {
            Manages consumer groups
            Handles partition rebalancing
        }
        class PartitionAssignor << (C,red) >> {
            Assigns partitions
            Determines which partitions to consume
        }
        class FetchManager << (C,red) >> {
            Fetches messages from the broker
        }
        class Deserializer << (C,red) >> {
            Deserializes byte arrays
            Converts byte arrays to objects
        }
        class ConsumerInterceptor << (C,red) >> {
            Intercepts messages
            Performs operations before and after consuming messages
        }

        Consumer --> Coordinator : uses
        Coordinator --> PartitionAssignor : uses
        PartitionAssignor --> FetchManager : uses
        FetchManager --> Deserializer : uses
        Deserializer --> ConsumerInterceptor : uses
        Broker --> FetchManager : delivers messages
    }
}

@enduml
