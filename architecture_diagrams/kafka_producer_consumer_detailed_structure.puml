@startuml
skinparam backgroundColor #F5F5F5
skinparam packageStyle rectangle
skinparam linetype ortho

package "Kafka System" {

    package "Producer Components" {
        class Producer << (P,blue) >> {
            Sends messages to the broker
        }
        class ProducerInterceptor << (P,blue) >> {
            Intercepts messages\nPerforms operations before and after sending messages
        }
        class Serializer << (P,blue) >> {
            Serializes objects\nConverts objects to byte arrays
        }
        class Partitioner << (P,blue) >> {
            Determines message partition
        }
        class RecordAccumulator << (P,blue) >> {
            Collects and batches messages
        }
        class Sender << (P,blue) >> {
            Fetches messages from the accumulator\nSends messages to the broker
        }

        Producer --> ProducerInterceptor : uses
        ProducerInterceptor --> Serializer : uses
        Serializer --> Partitioner : uses
        Partitioner --> RecordAccumulator : uses
        RecordAccumulator --> Sender : uses
    }

    package "Consumer Components" {
        class Consumer << (C,red) >> {
            Pulls messages from the broker
        }
        class Coordinator << (C,red) >> {
            Manages consumer groups\nHandles partition rebalancing
        }
        class PartitionAssignor << (C,red) >> {
            Assigns partitions\nDetermines which partitions to consume
        }
        class FetchManager << (C,red) >> {
            Fetches messages from the broker
        }
        class Deserializer << (C,red) >> {
            Deserializes byte arrays\nConverts byte arrays to objects
        }
        class ConsumerInterceptor << (C,red) >> {
            Intercepts messages\nPerforms operations before and after consuming messages
        }

        Consumer --> Coordinator : uses
        Coordinator --> PartitionAssignor : uses
        PartitionAssignor --> FetchManager : uses
        FetchManager --> Deserializer : uses
        Deserializer --> ConsumerInterceptor : uses
    }

    class Broker << (K,orchid) >> {
        Receives and stores messages\nDelivers messages to consumers
    }

    Sender --> Broker : sends messages
    FetchManager --> Broker : fetches messages

    Broker -down-> FetchManager
}

@enduml
