@startuml
!define RECTANGLE class

skinparam backgroundColor #FEFEFE
skinparam handwritten false
skinparam shadowing false

skinparam rectangle {
    BackgroundColor #E3F2FD
    BorderColor #2196F3
    BorderThickness 2
    FontName Arial
    FontSize 14
    FontColor #000000
    RoundCorner 10
}

skinparam note {
    BackgroundColor #FFF9C4
    BorderColor #FBC02D
    FontSize 12
    FontColor #000000
}

skinparam arrow {
    Color #2196F3
    Thickness 1.5
}

skinparam title {
    FontSize 24
    FontColor #000000
    FontStyle bold
}

title Detailed Fetch New Tweets Process

together {
RECTANGLE "Client" as Client #B3E5FC
}

package "Core Services" as Core {
    package "Load Balancer & Web Server" as LBWS {
        RECTANGLE "Load Balancer" as LB
        RECTANGLE "Web Server" as WS
    }
    package "Application & Monitoring Services" as AMS {
        RECTANGLE "Application Server" as AS
    }
}

package "Timeline Update Service" as TUS {
    RECTANGLE "Request Handler" as RH
    RECTANGLE "Async Queue\n(Kafka/RabbitMQ)" as AQ
}

package "Timeline Workers" as TW {
    RECTANGLE "Fetch New Tweets" as FNT
    RECTANGLE "Cache Query" as CQ
    RECTANGLE "Database Query" as DBQ
    RECTANGLE "De-duplicate & Sort" as DDS
    RECTANGLE "Cache Update" as CU
    RECTANGLE "Parallel Processing" as PP
}

package "Data Persistence Layer" as DPS {
    package "Caching (Redis Cluster)" as Cache {
        RECTANGLE "Tweet Cache" as TC
    }
    package "Databases (Sharded & Read-Replica)" as DB {
        RECTANGLE "Tweet Data" as TD
    }
}

Client -down-> LBWS : Requests Timeline Update
LBWS -down-> AMS : Routes Request
AMS -down-> TUS : Passes Request to TUS
RH -down-> AQ : Queues Fetch New Tweets Task
AQ -down-> TW : Processes Tasks
FNT -down-> CQ : Query Tweet Cache
CQ -right-> TC : Fetches from Cache
CQ -down-> DBQ : Cache Miss, Query Database
DBQ -down-> TD : Fetches Tweet Data
DBQ -right-> DDS : De-duplicate & Sort Tweets
DDS -right-> CU : Updates Tweet Cache
CU -right-> TC : Stores Tweets in Cache
PP -[hidden]right-> FNT

note right of FNT
  <b>性能优化</b>:
  • 优先查询缓存，减少数据库访问
  • 数据库查询优化（索引、缓存）
  • 多线程并行处理
  • 利用缓存加快读取速度
end note

note right of PP
  并行处理多个用户的时间线更新，
  提高整体吞吐量
end note

@enduml
