@startuml
allowmixing

skinparam backgroundColor #FEFEFE
skinparam handwritten false
skinparam shadowing false

skinparam rectangle {
    BackgroundColor E3F2FD
    BorderColor 2196F3
    BorderThickness 2
    FontName Arial
    FontSize 14
    FontColor 000000
    RoundCorner 10
}

skinparam note {
    BackgroundColor FFF9C4
    BorderColor FBC02D
    FontSize 16
    FontColor 000000
}

skinparam arrow {
    Color 2196F3
    Thickness 1.5
}

skinparam title {
    FontSize 24
    FontColor 000000
    FontStyle bold
}

title Detailed Fetch New Tweets Process

together {
rectangle "Client" as Client #B3E5FC
}

package "Core Services" as Core {
    package "Load Balancer & Web Server" as LBWS {
        rectangle "Load Balancer" as LB
        rectangle "Web Server" as WS
    }
    package "Application & Monitoring Services" as AMS {
        rectangle "Application Server" as AS
    }
}

package "Timeline Update Service" as TUS {
    rectangle "Request Handler" as RH
    rectangle "Async Queue\n(Kafka/RabbitMQ)" as AQ
}

package "Timeline Workers" as TW {
    rectangle "Fetch New Tweets" as FNT
    rectangle "Cache Query" as CQ
    rectangle "Database Query" as DBQ
    rectangle "De-duplicate & Sort" as DDS
    rectangle "Cache Update" as CU
    rectangle "Parallel Processing" as PP
}

package "Data Persistence Layer" as DPS {
    package "Caching (Redis Cluster)" as Cache {
        rectangle "Tweet Cache" as TC
    }
    package "Databases (Sharded & Read-Replica)" as DB {
        rectangle "Tweet Data" as TD
    }
}

Client -down-> LBWS : 1. Requests Timeline Update
LBWS -down-> AMS : 2. Routes Request
AMS -down-> TUS : 3. Passes Request to TUS
RH -down-> AQ : 4. Queues Fetch New Tweets Task
AQ -down-> TW : 5. Processes Tasks
FNT -down-> CQ : 6. Query Tweet Cache
CQ -right-> TC : 7. Fetches from Cache
CQ -down-> DBQ : 8. Cache Miss, Query Database
DBQ -down-> TD : 9. Fetches Tweet Data
DBQ -right-> DDS : 10. De-duplicate & Sort Tweets
DDS -right-> CU : 11. Updates Tweet Cache
CU -right-> TC : 12. Stores Tweets in Cache
PP -[hidden]right-> FNT

note right of FNT
  <b>Performance Optimization</b>:
  • Prioritize cache queries to reduce database access
  • Optimize database queries (indexing, caching)
  • Implement multi-threaded parallel processing
  • Utilize caching to speed up read operations
end note

note right of PP
  Parallel processing of timeline updates for multiple users,
  improving overall throughput
end note

@enduml
