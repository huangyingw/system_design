@startuml

skinparam backgroundColor #D3D3D3
skinparam defaultFontName "Arial"
skinparam defaultFontSize 16
skinparam note {
  BackgroundColor #FFFFFF
  BorderColor #000000
  FontSize 16
  FontName "Arial"
}

title Enhanced Twitter System Architecture with Scalability and Performance Strategies

rectangle "Client" as Client

rectangle "Core Services" as Core {
    rectangle "Load Balancer & Web Server" as LBWS {
        rectangle "Load Balancer" as LB
        rectangle "Web Server" as WS
    }
    rectangle "Application & Monitoring Services" as AMS {
        rectangle "Application Server" as AS
        rectangle "Service Circuit Breaker" as SCB
        rectangle "Service Auto-Scaling" as SAS
    }
}

rectangle "Tweet Processing Service" as TPS {
    rectangle "Tweet & Comment Handlers" as TCH {
        rectangle "Text Processing" as TP
        rectangle "Sensitive Word Filtering" as SWF
    }
    rectangle "Async Processing Queue (Kafka/RabbitMQ)" as APQ
    rectangle "Workers for Processing" as Workers {
        rectangle "Task Processing" as TProc
        rectangle "Database Update" as DBU
        rectangle "Cache Update" as CU
    }
}

rectangle "Supporting Services" as SS {
    rectangle "Search Service" as SSrv
    rectangle "Notification Service" as NSrv
    rectangle "Timeline Update Service" as TUS
}

rectangle "Data Persistence Layer" as DPS {
    rectangle "Caching (Redis Cluster)" as Cache {
        rectangle "Tweet & Timeline Caches" as TTC
        rectangle "Edge Caching (CDN)" as EC
    }
    rectangle "Databases (Sharded & Read-Replica)" as DB {
        rectangle "Tweet & Comment Data" as TCD
        rectangle "Data Partitioning & Sharding" as DPSH
    }
}

' Define data flows
Client -down-> LBWS : Sends Request
LBWS -down-> AMS : Routes Request
AMS -right-> TCH : Handles Tweet/Comment
TCH -down-> APQ : Queues Tasks
APQ -down-> Workers : Processes Tasks
Workers -down-> DPS : Updates Data
Workers -left-> SSrv : Updates Search
Workers -left-> NSrv : Notifies
TUS -down-> DPS : Updates Timelines
Client -left-> LBWS : Requests Timeline
AMS -down-> TUS : Fetches Timeline Data
TUS -left-> Cache : Checks Cache
Cache -down-> TUS : Returns Cached Data
TUS -up-> AMS : Returns Timeline Data
AMS -up-> LBWS : Sends Back Data
LBWS -up-> Client : Returns Data/Updates Timeline

' Performance Optimization Notes
note right of LB
  **负载均衡优化**:
  - 高性能负载均衡器
  - 多实例部署
end note

note right of Cache
  **缓存优化**:
  - Redis缓存热点数据
  - CDN缓存静态资源
end note

note right of DB
  **数据库优化**:
  - 分片和读写分离
  - 索引优化查询
end note

note right of APQ
  **异步处理**:
  - 使用消息队列
  - 增加消费者数量
end note

note right of AMS
  **自动扩展**:
  - 配置自动扩展策略
end note

@enduml
