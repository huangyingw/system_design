@startuml

!pragma layout dot
skinparam backgroundColor #E6E6FA
skinparam defaultFontName "Arial"
skinparam defaultFontSize 16
skinparam note {
  BackgroundColor #FFFACD
  BorderColor #DAA520
  FontSize 18
  FontName "Arial"
}

allowmixing

title Enhanced Twitter System Architecture with Advanced Scalability and Performance Strategies

rectangle "Client" as Client #FFEFD5

rectangle "Core Services" as Core #E0FFFF {
    rectangle "Load Balancer & API Gateway" as LBAG #98FB98 {
        component "Load Balancer" as LB
        component "API Gateway" as AG
    }
    rectangle "Application & Monitoring Services" as AMS #87CEFA {
        component "Application Server" as AS
        component "Service Circuit Breaker" as SCB
        component "Service Auto-Scaling" as SAS
        component "Monitoring & Logging" as ML
    }
}

rectangle "Tweet Processing Service" as TPS #FFB6C1 {
    rectangle "Tweet & Comment Handlers" as TCH #FFA07A {
        component "Text Processing" as TP
        component "Sensitive Word Filtering" as SWF
        component "Media Processing" as MP
    }
    rectangle "Async Processing Queue" as APQ #F0E68C {
        component "Kafka Cluster" as KC
    }
    rectangle "Workers for Processing" as Workers #98FB98 {
        component "Task Processing" as TProc
        component "Database Update" as DBU
        component "Cache Update" as CU
    }
}

rectangle "Supporting Services" as SS #DDA0DD {
    component "Search Service" as SSrv
    component "Notification Service" as NSrv
    component "Timeline Update Service" as TUS
    component "Content Delivery Network" as CDN
    component "User Authentication Service" as UAS
}

rectangle "Data Persistence Layer" as DPS #B0E0E6 {
    rectangle "Caching" as Cache #FAFAD2 {
        component "Redis Cluster" as RC
        component "Edge Caching (CDN)" as EC
    }
    rectangle "Databases" as DB #F0FFF0 {
        component "Tweet & Comment Data (NoSQL)" as TCD
        component "User Data (SQL)" as UD
        component "Data Partitioning & Sharding" as DPSH
    }
}

Client -[#1E90FF,thickness=2]down-> LBAG : <back:#FFFFFF><color:#1E90FF>1. Sends Request</color></back>
LBAG -[#32CD32,thickness=2]down-> AMS : <back:#FFFFFF><color:#32CD32>2. Routes Request</color></back>
AMS -[#FF4500,thickness=2]right-> TCH : <back:#FFFFFF><color:#FF4500>3. Handles Tweet/Comment</color></back>
TCH -[#8A2BE2,thickness=2]down-> APQ : <back:#FFFFFF><color:#8A2BE2>4. Queues Tasks</color></back>
APQ -[#FF69B4,thickness=2]down-> Workers : <back:#FFFFFF><color:#FF69B4>5. Processes Tasks</color></back>
Workers -[#20B2AA,thickness=2]down-> DPS : <back:#FFFFFF><color:#20B2AA>6. Updates Data</color></back>
Workers -[#DAA520,thickness=2]left-> SSrv : <back:#FFFFFF><color:#DAA520>7. Updates Search</color></back>
Workers -[#FF6347,thickness=2]left-> NSrv : <back:#FFFFFF><color:#FF6347>8. Notifies</color></back>
TUS -[#4682B4,thickness=2]down-> DPS : <back:#FFFFFF><color:#4682B4>9. Updates Timelines</color></back>
Client -[#9370DB,thickness=2]left-> LBAG : <back:#FFFFFF><color:#9370DB>10. Requests Timeline</color></back>
AMS -[#3CB371,thickness=2]down-> TUS : <back:#FFFFFF><color:#3CB371>11. Fetches Timeline Data</color></back>
TUS -[#CD5C5C,thickness=2]left-> Cache : <back:#FFFFFF><color:#CD5C5C>12. Checks Cache</color></back>
Cache -[#4169E1,thickness=2]down-> TUS : <back:#FFFFFF><color:#4169E1>13. Returns Cached Data</color></back>
TUS -[#FF8C00,thickness=2]up-> AMS : <back:#FFFFFF><color:#FF8C00>14. Returns Timeline Data</color></back>
AMS -[#2E8B57,thickness=2]up-> LBAG : <back:#FFFFFF><color:#2E8B57>15. Sends Back Data</color></back>
LBAG -[#8B008B,thickness=2]up-> Client : <back:#FFFFFF><color:#8B008B>16. Returns Data/Updates Timeline</color></back>

note right of LBAG
  Load Balancer & API Gateway:
  - Use HAProxy or NGINX for load balancing
  - Implement rate limiting and request throttling
  - API versioning and documentation
end note

note right of AMS
  Application & Monitoring:
  - Implement distributed tracing (e.g., Jaeger)
  - Use ELK stack for centralized logging
  - Set up Prometheus & Grafana for monitoring
end note

note right of TPS
  Tweet Processing:
  - Implement content moderation AI
  - Use Apache Flink for real-time stream processing
  - Optimize media processing with FFmpeg
end note

note right of SS
  Supporting Services:
  - Implement Elasticsearch for efficient search
  - Use WebSocket for real-time notifications
  - Implement OAuth 2.0 and JWT for authentication
end note

note right of DPS
  Data Persistence:
  - Use Cassandra for tweet storage
  - Implement read replicas for high availability
  - Use database connection pooling
end note

@enduml
