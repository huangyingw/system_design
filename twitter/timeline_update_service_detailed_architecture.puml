@startuml Timeline Update Service Detailed Architecture

!define RECTANGLE rectangle
allowmixing

skinparam backgroundColor #F0F0F0
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam roundCorner 10
skinparam componentStyle uml2

skinparam component {
  BorderColor #3C7FC0
  BackgroundColor #D4E5F7
}

skinparam note {
  BackgroundColor #FFFACD
  BorderColor #DAA520
  FontSize 11
}

title Timeline Update Service Detailed Architecture

RECTANGLE "Client" as Client #LightBlue

RECTANGLE "Core Services" as CoreServices {
  component "Load Balancer" as LB #87CEFA
  component "Web Server" as WS #87CEFA
}

RECTANGLE "Application & Monitoring Services" as AMS {
  component "Application Server" as AS #98FB98
  component "Service Circuit Breaker" as SCB #98FB98
  component "Service Auto-Scaling" as SAS #98FB98
}

RECTANGLE "Timeline Update Service" as TUS {
  component "Request Handler" as RH #FFA07A
  component "Async Queue (Kafka/RabbitMQ)" as AQ #FFA07A
}

rectangle "Timeline Workers" as TW {
  component "Fetch New Tweets" as FNT #FFD700
  component "Update Timeline" as UT #FFD700
  component "Notify Users" as NU #FFD700
  component "Preload Content" as PC #FFD700
}

rectangle "Data Persistence Layer" as DPL {
  rectangle "Caching (Redis Cluster)" as Cache {
    component "Timeline Cache" as TC #F0E68C
    component "Edge Caching (CDN)" as EC #F0E68C
  }
  rectangle "Databases (Sharded & Read-Replica)" as DB {
    component "User Timelines" as UTDB #DDA0DD
    component "Tweet Data" as TD #DDA0DD
  }
}

Client -down-> LB : 1. Requests Timeline Update
LB -down-> WS : 2. Routes Request
WS -down-> AS : 3. Passes Request
AS -down-> RH : 4. Handles Request
RH -down-> AQ : 5. Queues Timeline Update Tasks
AQ -down-> FNT : 6. Processes Tasks
FNT -right-> TD : 7. Fetches New Tweets
FNT -down-> TC : 8. Updates Timeline Cache
UT -up-> UTDB : 9. Updates User Timelines
NU -up-> Client : 10. Notifies Users
TC -right-> EC : 11. Uses Edge Caching for Speed

note right of RH
  Performance Optimization:
  - Use async queue for timeline update tasks
  - Increase worker threads for timeline updates
  - Utilize Redis for timeline data caching
  - Use CDN for static resource caching
  - Implement database sharding and read replicas
end note

note right of PC
  Preload content likely to be viewed,
  reducing user wait time
end note

@enduml
