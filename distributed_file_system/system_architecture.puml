@startuml Optimized Distributed File System Architecture
!define RECTANGLE rectangle
!define DATABASE database

skinparam backgroundColor #F0F0F0
skinparam handwritten false
skinparam monochrome false
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam roundCorner 10
skinparam ArrowColor #2C3E50
skinparam ArrowThickness 1.5
skinparam linetype ortho

' Client
rectangle "Client" as Client #A9CCE3

' Load Balancer Cluster
RECTANGLE "Load Balancer Cluster" as LB #F5B041 {
    component "Health Check" as HealthCheck
    component "Request Router" as RequestRouter
}

' Caching Layer
RECTANGLE "Caching Layer" as CacheLayer #85C1E9 {
    DATABASE "Redis Cluster" as RedisCache {
        note right: "Keys:\n- file_path:chunk_id\n- metadata:file_path"
    }
}

' Name Node Cluster
RECTANGLE "Name Node Cluster" as NameNodeCluster #82E0AA {
    DATABASE "Metadata Storage\n(ZooKeeper)" as MetadataStorage {
        note right: "Data:\n- File system tree\n- Block mappings\n- Node status"
    }
    component "File System Manager" as FSManager
    component "Block Manager" as BlockManager
    component "Replication Manager" as ReplicationManager
    component "Data Node Manager" as DataNodeManager
}

' Data Node Clusters
RECTANGLE "Data Node Cluster 1" as DataNodeCluster1 #F1948A {
    DATABASE "Primary Storage 1" as PrimaryStorage1 {
        note right: "Sharding Key: file_id % 2 == 0"
    }
    DATABASE "Replica Storage 2" as ReplicaStorage2 {
        note right: "Replica of Cluster 2"
    }
}

RECTANGLE "Data Node Cluster 2" as DataNodeCluster2 #F1948A {
    DATABASE "Primary Storage 2" as PrimaryStorage2 {
        note right: "Sharding Key: file_id % 2 == 1"
    }
    DATABASE "Replica Storage 1" as ReplicaStorage1 {
        note right: "Replica of Cluster 1"
    }
}

' Admin Node
RECTANGLE "Admin Node" as AdminNode #D7BDE2 {
    component "Monitoring" as Monitoring
    component "Configuration" as Config
    component "Failure Handler" as FailureHandler
}

' Layout and Connections
Client -down-> LB : "1. Client Request"
LB -down-> CacheLayer : "2a. Read: Check Cache"
LB -right-> NameNodeCluster : "2b. Write: Get Metadata"
CacheLayer -right-> NameNodeCluster : "3. Cache Miss"
NameNodeCluster -down-> DataNodeCluster1 : "4a. Write: Primary"
NameNodeCluster -down-> DataNodeCluster2 : "4a. Write: Primary"
NameNodeCluster -down-> DataNodeCluster1 : "4b. Read: Replica"
NameNodeCluster -down-> DataNodeCluster2 : "4b. Read: Replica"
DataNodeCluster1 -up-> CacheLayer : "5. Update Cache"
DataNodeCluster2 -up-> CacheLayer : "5. Update Cache"
AdminNode -up-> NameNodeCluster : "6. Manage & Monitor"
AdminNode -up-> LB : "6. Manage & Monitor"
DataNodeCluster1 -[#green]right-> DataNodeCluster2 : "7. Replicate"
DataNodeCluster2 -[#green]left-> DataNodeCluster1 : "7. Replicate"
NameNodeCluster -[#blue]down-> DataNodeCluster1 : "8. Manage Data Nodes"
NameNodeCluster -[#blue]down-> DataNodeCluster2 : "8. Manage Data Nodes"

' Additional notes for explanation
note top of Client
  Clients interact with the system through 
  a unified interface, handling both 
  read and write operations
end note

note bottom of LB
  Load Balancer ensures even distribution 
  of requests and provides fault tolerance
end note

note bottom of CacheLayer
  Caching layer improves read performance 
  by storing frequently accessed data
end note

note bottom of NameNodeCluster
  Name Node Cluster manages metadata, 
  ensuring data consistency and availability
end note

note bottom of DataNodeCluster1
  Data Nodes store actual file data,
  with built-in replication for fault tolerance
end note

note bottom of AdminNode
  Admin Node oversees system health,
  configuration, and handles failures
end note

@enduml
