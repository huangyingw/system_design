@startuml HDFS Data Model
!define TABLE(name,desc) class name as "desc" << (T,#FFAAAA) >>
!define PK(x) <u>x</u>
!define FK(x) <i>x</i>
skinparam backgroundColor #FEFEFE
skinparam handwritten false
skinparam monochrome false
skinparam lineType ortho
skinparam shadowing false
skinparam class {
    BackgroundColor #E0F2F1
    ArrowColor #4A4A4A
    BorderColor #1A237E
    FontName Arial
    FontSize 10
}
skinparam note {
    BackgroundColor #FFF9C4
    BorderColor #FBC02D
}
' NameNode Components
rectangle "NameNode" as NameNode #E8F5E9 {
    TABLE(FileMetadata, "File Metadata") {
        PK(file_path): STRING
        file_name: STRING
        file_size: LONG
        owner: STRING
        permissions: STRING
        created_at: LONG
        updated_at: LONG
        is_directory: BOOLEAN
        replication_factor: SHORT
    }
    TABLE(BlockMetadata, "Block Metadata") {
        PK(block_id): LONG
        FK(file_path): STRING
        block_size: LONG
        block_locations: LIST<DataNodeID>
        generation_stamp: LONG
    }
    TABLE(DataNodeInfo, "DataNode Info") {
        PK(node_id): STRING
        hostname: STRING
        ip_address: STRING
        total_space: LONG
        used_space: LONG
        last_heartbeat: LONG
        status: STRING
        rack_id: STRING
    }
}

note right of NameNode
    NameNode是HDFS的核心，负责：
    1. 管理文件系统命名空间
    2. 维护文件和目录的元数据
    3. 管理数据块到DataNode的映射
    4. 处理客户端读写请求
end note

' NameNode Persistent Storage
rectangle "NameNode Persistent Storage" as NameNodeStorage #FFF3E0 {
    TABLE(EditLog, "Edit Log") {
        PK(transaction_id): LONG
        operation_type: STRING
        operation_details: STRING
        timestamp: LONG
    }
    TABLE(FSImage, "FSImage") {
        PK(checkpoint_txid): LONG
        file_system_metadata: BYTE[]
        timestamp: LONG
    }
}

note bottom of NameNodeStorage
    持久化存储确保系统可恢复性：
    - EditLog记录所有文件系统操作
    - FSImage是文件系统元数据的快照
    定期将EditLog合并到FSImage中以提高效率
end note

' DataNode Components
rectangle "DataNode" as DataNode #E1F5FE {
    TABLE(DataBlocks, "Data Blocks") {
        PK(block_id): LONG
        data: BYTE[]
        checksum: BYTE[]
    }
    TABLE(BlockReport, "Block Report") {
        FK(node_id): STRING
        FK(block_id): LONG
        block_length: LONG
        generation_stamp: LONG
    }
}

note left of DataNode
    DataNode负责：
    1. 存储实际数据块
    2. 处理数据块的读写请求
    3. 定期向NameNode报告块状态
    4. 执行数据块的复制和删除
end note

' Cache Layer
rectangle "Cache Layer" as CacheLayer #F3E5F5 {
    TABLE(RedisCache, "Redis Cache Cluster") {
        key: STRING
        value: STRING
        expiration: INT
    }
}

note bottom of RedisCache
    Keys:
    file_metadata:{file_path}
    block_locations:{block_id}
end note

note right of CacheLayer
    Redis缓存层用于：
    1. 加速元数据访问
    2. 减轻NameNode负载
    3. 提高热点数据的读取性能
end note

' Relationships
FileMetadata "1" -- "0..*" BlockMetadata
BlockMetadata "0..*" -- "1..*" DataNodeInfo
DataNodeInfo "1" -- "0..*" BlockReport
BlockMetadata "1" -- "1" DataBlocks
EditLog "1..*" -- "0..1" FSImage
FileMetadata "1" -- "0..*" EditLog
BlockMetadata "1" -- "0..*" EditLog
RedisCache "0..*" -- "1" FileMetadata
RedisCache "0..*" -- "1" BlockMetadata

' Layout
NameNode -[hidden]right- DataNode
NameNode -[hidden]down- NameNodeStorage
NameNodeStorage -[hidden]right- CacheLayer

note as PerformanceNote
性能优化和扩展性考虑：
1. 使用Redis缓存减少NameNode负载
2. 通过数据块复制提高可用性和读取性能
3. 使用机架感知策略优化数据放置
4. 实现Secondary NameNode以加快故障恢复
5. 考虑使用HDFS Federation进行水平扩展
end note
PerformanceNote -[hidden]right- CacheLayer
@enduml
