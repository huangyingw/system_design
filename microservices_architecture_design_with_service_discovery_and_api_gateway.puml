@startuml Microservices Architecture Design

allowmixing

skinparam {
    backgroundColor #F0F0F0
    handwritten false
    defaultFontName Arial
    defaultFontSize 12
    roundcorner 20
    shadowing false
    ArrowColor #2C3E50
    ActorBorderColor #2C3E50
    LifeLineBorderColor #2C3E50
    LifeLineBackgroundColor #A9DCDF
    
    ParticipantBorderColor #2C3E50
    ParticipantBackgroundColor #A9DCDF
    ParticipantFontName Arial
    ParticipantFontSize 12
    ParticipantFontColor #2C3E50
    
    ActorBackgroundColor #A9DCDF
    ActorFontColor #2C3E50
    ActorFontSize 12
    ActorFontName Arial
    
    RectangleBackgroundColor #FFFFFF
    
    NoteFontName Arial
    NoteFontSize 11
    NoteFontColor #333333
    NoteBackgroundColor #FFFDE7
    NoteBorderColor #FFC107
}

title Microservices Architecture Design

' Client Layer
rectangle "Client Layer" as ClientLayer #E1F5FE {
    component "Web Application" as WebApp
    component "Mobile App" as MobileApp
    component "Third-party Clients" as ThirdPartyClients
}

' API Gateway
RECTANGLE "API Gateway" as APIGateway #FFF3E0 {
    component "Authentication" as Auth
    component "Rate Limiting" as RateLimit
    component "Request Routing" as RequestRouting
    component "Response Caching" as ResponseCaching
}

' Service Discovery
RECTANGLE "Service Discovery" as ServiceDiscovery #E8F5E9 {
    component "Service Registry" as ServiceRegistry
    component "Load Balancer" as LoadBalancer
}

' Microservices
RECTANGLE "Microservices" as Microservices #FFEBEE {
    component "User Service" as UserService
    component "Product Service" as ProductService
    component "Order Service" as OrderService
    component "Payment Service" as PaymentService
    component "Notification Service" as NotificationService
}

' Data Layer
RECTANGLE "Data Layer" as DataLayer #E0F7FA {
    database "User DB" as UserDB
    database "Product DB" as ProductDB
    database "Order DB" as OrderDB
    database "Payment DB" as PaymentDB
}

' Message Queue
queue "Message Queue" as MessageQueue #F3E5F5

' Monitoring and Logging
RECTANGLE "Monitoring & Logging" as MonitoringLogging #FFF8E1 {
    component "Centralized Logging" as CentralizedLogging
    component "Metrics Collection" as MetricsCollection
    component "Distributed Tracing" as DistributedTracing
}

' Connections
ClientLayer -down-> APIGateway : 1. API Requests
APIGateway -down-> ServiceDiscovery : 2. Service Lookup
ServiceDiscovery -right-> Microservices : 3. Route Requests
Microservices -down-> DataLayer : 4. Data Operations
Microservices -left-> MessageQueue : 5. Async Communication
MonitoringLogging -up-> Microservices : 6. Collect Metrics & Logs

' Notes
note right of APIGateway
  Handles cross-cutting concerns:
  - Authentication
  - Rate limiting
  - Request routing
  - Response caching
end note

note right of ServiceDiscovery
  Enables dynamic service
  registration and discovery
end note

note right of Microservices
  Each service is:
  - Independently deployable
  - Loosely coupled
  - Focused on specific domain
end note

note right of MessageQueue
  Enables asynchronous
  communication between services
end note

note right of MonitoringLogging
  Centralized monitoring and
  logging for all services
end note

@enduml
