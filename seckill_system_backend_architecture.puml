@startuml Seckill System Backend Architecture
!pragma layout dot
skinparam backgroundColor #FAFAFA
skinparam defaultFontName Arial
skinparam defaultFontSize 24
skinparam roundcorner 8
skinparam shadowing false
skinparam padding 15
skinparam componentPadding 25
skinparam ArrowColor #666666
skinparam ArrowFontColor #333333
skinparam ArrowFontSize 20
skinparam ArrowLabelDistance 10
allowmixing

title Seckill System Backend Architecture

rectangle "Client Layer" as ClientLayer #E1F5FE {
    component "Web Clients" as WebClients
    component "Mobile Apps" as MobileApps
}

rectangle "Entry Layer" as EntryLayer #FFCCBC {
    component "CDN" as CDN
    component "Load Balancer" as LoadBalancer
    component "API Gateway" as APIGateway
}

rectangle "Security Layer" as SecurityLayer #FFE0B2 {
    component "Authentication" as Authentication
    component "Rate Limiting" as RateLimiting
    component "DDoS Protection" as DDoSProtection
}

rectangle "Service Layer" as ServiceLayer #E8F5E9 {
    component "Seckill Service" as SeckillService
    component "Order Service" as OrderService
    component "Inventory Service" as InventoryService
    component "User Service" as UserService
    component "Payment Service" as PaymentService
}

rectangle "Cache Layer" as CacheLayer #E0F7FA {
    component "Redis Cluster" as RedisCluster
    component "Local Cache" as LocalCache
}

rectangle "Message Queue" as MessageQueue #F3E5F5 {
    component "Kafka Cluster" as KafkaCluster
}

rectangle "Async Processing" as AsyncProcessing #DCEDC8 {
    component "Order Processor" as OrderProcessor
    component "Inventory Updater" as InventoryUpdater
    component "Payment Processor" as PaymentProcessor
}

rectangle "Data Layer" as DataLayer #FFF3E0 {
    component "Master DB" as MasterDB
    component "Read Replicas" as ReadReplicas
    component "Sharding Proxy" as ShardingProxy
}

rectangle "Monitoring & Logging" as MonitoringLogging #ECEFF1 {
    component "ELK Stack" as ELKStack
    component "Prometheus" as Prometheus
    component "Grafana" as Grafana
}

ClientLayer -[#0000FF,thickness=2]-> EntryLayer : "<color:#0000FF><b>1. Request</b></color>"
EntryLayer -[#00AA00,thickness=2]-> SecurityLayer : "<color:#00AA00><b>2. Validate</b></color>"
SecurityLayer -[#FF0000,thickness=2]-> ServiceLayer : "<color:#FF0000><b>3. Process</b></color>"
ServiceLayer <-[#FF00FF,thickness=2]-> CacheLayer : "<color:#FF00FF><b>4. Cache R/W</b></color>"
ServiceLayer -[#00AAAA,thickness=2]-> MessageQueue : "<color:#00AAAA><b>5. Publish</b></color>"
AsyncProcessing <-[#AA00AA,thickness=2]- MessageQueue : "<color:#AA00AA><b>6. Consume</b></color>"
ServiceLayer <-[#AAAA00,thickness=2]-> DataLayer : "<color:#AAAA00><b>7. CRUD</b></color>"
AsyncProcessing <-[#FF6600,thickness=2]-> DataLayer : "<color:#FF6600><b>8. Update</b></color>"

MonitoringLogging ..> ClientLayer : "Monitor"
MonitoringLogging ..> EntryLayer : "Monitor"
MonitoringLogging ..> SecurityLayer : "Monitor"
MonitoringLogging ..> ServiceLayer : "Monitor"
MonitoringLogging ..> CacheLayer : "Monitor"
MonitoringLogging ..> MessageQueue : "Monitor"
MonitoringLogging ..> AsyncProcessing : "Monitor"
MonitoringLogging ..> DataLayer : "Monitor"

note right of EntryLayer
  CDN for static content,
  Load Balancer for traffic distribution,
  API Gateway for request routing
end note

note right of SecurityLayer
  Implements authentication,
  rate limiting, and DDoS protection
end note

note right of CacheLayer
  Distributed cache for high performance:
  - Product inventory
  - User session data
  - Order status
end note

note bottom of AsyncProcessing
  Scalable workers for high-volume tasks:
  - Order confirmation
  - Inventory updates
  - Payment processing
end note

note bottom of DataLayer
  Master-Slave replication with sharding
  for horizontal scalability and
  read/write separation
end note

@enduml
