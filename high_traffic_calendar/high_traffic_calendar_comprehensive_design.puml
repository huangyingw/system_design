@startuml
package "Web Services" {
  [API Gateway]
  [Web Server: Django/Flask/FastAPI]
  [Task Queue: Celery]
}
package "Databases" {
  [Primary DB: MongoDB]
  [Cache: Redis]
}
package "MongoDB Cluster" {
  package "Config Servers" {
    [Config Server 1]
    [Config Server 2]
    [Config Server 3]
  }
  
  package "Query Routers" {
    [mongos 1]
    [mongos 2]
  }
  
  package "Shards" {
    package "Shard 1" {
      [Primary Node 1]
      [Secondary Node 1]
      [Secondary Node 2]
    }
    package "Shard 2" {
      [Primary Node 2]
      [Secondary Node 3]
      [Secondary Node 4]
    }
    package "Shard 3" {
      [Primary Node 3]
      [Secondary Node 5]
      [Secondary Node 6]
    }
  }
}
actor User
rectangle "Web Server" {
  [API Gateway]
  [Business Logic]
}
rectangle "Cache" {
  [Redis]
}
User --> "API Gateway": Request
"API Gateway" --> "Business Logic": Forward Request
"Business Logic" --> "Redis": Check Cache (Read)
note right
  If Cache Hit:
    Redis returns cached data
  If Cache Miss:
    Query MongoDB
end note
"Business Logic" --> "Query Routers (mongos)": Read Request (If Cache Miss)
"Query Routers (mongos)" --> "Secondary Node 1": Read Request
"Query Routers (mongos)" --> "Secondary Node 2": Read Request
"Query Routers (mongos)" --> "Secondary Node 3": Read Request
"Secondary Node 1" --> "Query Routers (mongos)": Return Data
"Secondary Node 2" --> "Query Routers (mongos)": Return Data
"Secondary Node 3" --> "Query Routers (mongos)": Return Data
"Query Routers (mongos)" --> "Business Logic": Return Data
"Business Logic" --> "Redis": Update Cache (If Cache Miss)
"Business Logic" --> "API Gateway": Return Data
"API Gateway" --> User: Return Result
@enduml
