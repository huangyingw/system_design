@startuml

entity "Users" as U {
  *_id: ObjectId (PK)
  --
  username: String
  email: String
  password: String
}

entity "Events" as E {
  *_id: ObjectId (PK)
  --
  owner_id: ObjectId (FK to Users)
  event_name: String
  description: String
  start_time: Date
  end_time: Date
  recurrence_id: ObjectId (FK to Events)
  recurrence_rule: String
  status: String
  participants: Array<Participant>
}

entity "Participants" as P {
  *participant_id: ObjectId (PK)
  --
  event_id: ObjectId (FK to Events)
  user_id: ObjectId (FK to Users)
  status: String
}

entity "Reminders" as R {
  *_id: ObjectId (PK)
  --
  event_id: ObjectId (FK to Events)
  user_id: ObjectId (FK to Users)
  reminder_time: Date
}

entity "Redis Cache" as C {
  --
  user_calendar_{user_id}_{date_range}: List of Events
  event_detail_{event_id}: Event Details
  event_participants_{event_id}: List of Participants
  upcoming_reminders_{user_id}: List of Reminders
  frequently_accessed_events: List of Event IDs
  user_preferences_{user_id}: User Preferences
}

note right of E
  Indexes:
  - owner_id: 1, start_time: 1, end_time: 1
  - start_time: 1, end_time: 1
  - event_name: "text", description: "text"
  Sharding Key:
  - owner_id: 1, start_time: 1, end_time: 1
end note

note right of R
  Indexes:
  - user_id: 1
  - event_id: 1
  Sharding Key:
  - hash(user_id)
end note

note "Kafka Topics:\n- event_updates\n- cache_invalidations\n- reminder_notifications" as KT

note "Elasticsearch Index:\n- events_index" as ESI

U ||--o{ E : creates
E ||--o{ P : includes
E ||--o{ R : has
U ||--o{ C : caches
E ||--o{ C : caches
P ||--o{ C : caches
R ||--o{ C : caches

@enduml
