@startuml

actor User
participant "API Gateway"
participant "Business Logic"
participant "Kafka"
participant "Worker"
database "MongoDB"
database "Redis Cache"
database "Elasticsearch"

User -> "API Gateway": Modify Recurrence Rule Request
"API Gateway" -> "Business Logic": Forward Request
"Business Logic" -> "Kafka": Publish Modification Request

"Kafka" -> Worker: Consume Modification Request
Worker -> MongoDB: Find all related events by recurrence_id
MongoDB -> Worker: Return related events

alt Events Found
    Worker -> MongoDB: Update events with new rules
    Worker -> MongoDB: Delete future events not matching new rules
    MongoDB -> Worker: Acknowledge updates

    Worker -> MongoDB: Read updated events
    MongoDB -> Worker: Return updated events

    Worker -> "Kafka": Publish Cache Invalidation
    "Kafka" -> "Redis Cache": Consume and Invalidate Cache
    "Redis Cache" -> Worker: Acknowledge Cache Invalidation

    Worker -> "Kafka": Publish Search Index Update
    "Kafka" -> Elasticsearch: Consume and Update Index
    Elasticsearch -> Worker: Acknowledge Index Update

    Worker -> "Kafka": Publish Operation Result
else No Events Found
    Worker -> "Kafka": Publish Error or Empty Response
end

"Kafka" -> "Business Logic": Consume Operation Result
"Business Logic" -> "API Gateway": Return response
"API Gateway" -> User: Return result

note right of "Kafka"
  Enables asynchronous processing
  and decouples components
end note

note right of Worker
  Handles complex operations
  asynchronously
end note

@enduml
