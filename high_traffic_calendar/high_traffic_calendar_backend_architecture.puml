@startuml

package "Web Services" {
  [API Gateway]
  [Web Server: Django/Flask/FastAPI]
  [Task Queue: Celery]
}

package "Databases" {
  [Primary DB: PostgreSQL/MySQL]
  [Cache: Redis]
  [Search Engine: Elasticsearch]
}

package "Load Balancer" {
  [Nginx/HAProxy]
}

package "Workers" {
  [Worker: Celery]
}

actor User

User --> "API Gateway": Request
"API Gateway" --> "Web Server": Request
"Web Server" --> "Cache": Check Cache
note right of "Cache"
  if Cache Miss:
    return Cache Miss
end note
"Cache" --> "Web Server": Cache Miss
"Web Server" --> "Primary DB": Query
"Primary DB" --> "Web Server": Return Data
"Web Server" --> "Cache": Update Cache
note right of "Cache"
  if Cache Hit:
    return Cached Data
end note
"Cache" --> "Web Server": Cache Hit
"Web Server" --> "Search Engine": Search
"Task Queue" --> "Worker": Send Tasks
"Worker" --> "Primary DB": Query
"Worker" --> "Cache": Invalidate Cache

@enduml
