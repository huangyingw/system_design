@startuml

package "Web Services" {
  [API Gateway]
  [Web Server: Django/Flask/FastAPI]
  [Task Queue: Celery]
}

package "Databases" {
  [Primary DB: PostgreSQL/MySQL]
  [Cache: Redis]
  [Search Engine: Elasticsearch]
}

package "Load Balancer" {
  [Nginx/HAProxy]
}

package "Workers" {
  [Worker: Celery]
}

actor User

User --> "API Gateway": Request
"API Gateway" --> "Web Server": Request
"Web Server" --> "Cache": Check Cache
"Cache" --> "Web Server": Cache Hit 
"Cache" -> "Web Server": Cache Miss 

"Web Server" --> "Primary DB": Query : If Cache Miss
"Primary DB" --> "Web Server": Return Data
"Web Server" --> "Cache": Update Cache : If Cache Miss

"Web Server" --> "Search Engine": Search
"Task Queue" --> "Worker": Send Tasks
"Worker" --> "Primary DB": Query
"Worker" --> "Cache": Invalidate Cache

@enduml
