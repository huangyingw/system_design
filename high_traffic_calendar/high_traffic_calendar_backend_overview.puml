@startuml
actor User

rectangle "API Gateway" {
  [Create Event]
  [Update Event]
  [Delete Event]
  [Get Events]
}

rectangle "Web Server" {
  [Business Logic]
}

rectangle "Message Queue" {
  [Kafka]
}

rectangle "Workers" {
  [Send Notification\nWhen an event is about to start,\nsend a notification to the user.]
  
  [Process Recurring Events\nHandle periodic events, e.g.,\nweekly or monthly recurring events.]
  
  [Data Analysis & Report Generation\nAnalyze large datasets and\ngenerate reports or statistics.]
  
  [Cache Update\nUpdate cache when the database\ndata changes.]
  
  [Search Index Update\nUpdate Elasticsearch index when\nevent data changes.]
}

package "Databases" {
  [Primary DB: MongoDB]
  [Cache: Redis]
  [Search Engine: Elasticsearch]
}

package "Load Balancer" {
  [Nginx/HAProxy]
}

package "Worker Nodes" {
  [Worker: Kafka Consumer]
}

User --> "API Gateway": Request
"API Gateway" --> "Web Server": Forward Request
"Web Server" --> "Message Queue: Kafka": Publish Message
"Message Queue: Kafka" --> "Workers": Consume Message
"Workers" --> "Message Queue: Kafka": Publish Result

"Web Server" --> "Cache: Redis": Check Cache
"Cache: Redis" --> "Web Server": Cache Hit
"Cache: Redis" -> "Web Server": Cache Miss

"Web Server" --> "Primary DB: MongoDB": Query : If Cache Miss
"Primary DB: MongoDB" --> "Web Server": Return Data
"Web Server" --> "Cache: Redis": Update Cache : If Cache Miss

"Web Server" --> "Search Engine: Elasticsearch": Search
"Message Queue: Kafka" --> "Worker Nodes: Kafka Consumer": Send Tasks
"Worker Nodes: Kafka Consumer" --> "Primary DB: MongoDB": Query/Update
"Worker Nodes: Kafka Consumer" --> "Cache: Redis": Invalidate/Update Cache
"Worker Nodes: Kafka Consumer" --> "Search Engine: Elasticsearch": Update Index

@enduml
