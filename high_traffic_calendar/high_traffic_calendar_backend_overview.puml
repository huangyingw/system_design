@startuml

actor User

rectangle "API Gateway" {
  [Create Event]
  [Update Event]
  [Delete Event]
  [Get Events]
}

rectangle "Web Server" {
  [Business Logic]
}

queue "Message Queue" {
  [Kafka]
}

rectangle "Workers" {
  [Send Notification]
  [Process Recurring Events]
  [Data Analysis & Reporting]
  [Cache Update]
  [Search Index Update]
}

database "Databases" {
  [Primary DB: MongoDB]
  [Cache: Redis]
  [Search Engine: Elasticsearch]
}

rectangle "Load Balancer" {
  [Nginx/HAProxy]
}

rectangle "Worker Nodes" {
  [Kafka Consumer]
}

User --> [Load Balancer]
[Load Balancer] --> "API Gateway"
"API Gateway" --> "Web Server"

"Web Server" --> [Kafka]
[Kafka] --> "Workers"
"Workers" --> [Kafka]: Results

"Web Server" --> [Cache: Redis]: Check
[Cache: Redis] --> "Web Server": Hit/Miss

"Web Server" --> [Primary DB: MongoDB]: Query if cache miss
[Primary DB: MongoDB] --> "Web Server": Data
"Web Server" --> [Cache: Redis]: Update if cache miss

"Web Server" --> [Search Engine: Elasticsearch]: Search

[Kafka] --> "Worker Nodes"
"Worker Nodes" --> [Primary DB: MongoDB]: Query/Update
"Worker Nodes" --> [Cache: Redis]: Invalidate/Update
"Worker Nodes" --> [Search Engine: Elasticsearch]: Update Index

note right of "Web Server"
  Handles core business logic,
  interacts with database and cache,
  publishes messages to Kafka
end note

note right of [Kafka]
  Enables loose coupling 
  and high-throughput 
  event streaming
end note

note right of [Primary DB: MongoDB]
  Flexible, scalable
  document-based storage
end note

@enduml
