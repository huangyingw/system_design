@startuml

package "MongoDB Cluster" {
  package "Config Servers" {
    [Config Server 1]
    [Config Server 2]
    [Config Server 3]
  }
  
  package "Query Routers" {
    [mongos 1]
    [mongos 2]
  }
  
  package "Shards" {
    package "Shard 1" {
      [Primary Node 1]
      [Secondary Node 1]
      [Secondary Node 2]
    }
    package "Shard 2" {
      [Primary Node 2]
      [Secondary Node 3]
      [Secondary Node 4]
    }
    package "Shard 3" {
      [Primary Node 3]
      [Secondary Node 5]
      [Secondary Node 6]
    }
  }
}

actor User

rectangle "Web Server" {
  [API Gateway]
  [Business Logic]
}

database "Cache" {
  [Redis]
}

queue "Message Queue" {
  [Kafka]
}

database "Search Engine" {
  [Elasticsearch]
}

User --> "API Gateway": Request
"API Gateway" --> "Business Logic": Forward Request
"Business Logic" --> "Redis": Check Cache
"Redis" --> "Business Logic": Cache Hit/Miss

"Business Logic" --> "Query Routers (mongos)": Read Request
"Query Routers (mongos)" --> "Secondary Node 1": Read Data
"Query Routers (mongos)" --> "Secondary Node 3": Read Data
"Query Routers (mongos)" --> "Secondary Node 5": Read Data

"Business Logic" --> "Kafka": Publish Write Request
"Kafka" --> "Primary Node 1": Consume Write Request
"Kafka" --> "Primary Node 2": Consume Write Request
"Kafka" --> "Primary Node 3": Consume Write Request

"Primary Node 1" --> "Secondary Node 1": Replicate Data
"Primary Node 2" --> "Secondary Node 3": Replicate Data
"Primary Node 3" --> "Secondary Node 5": Replicate Data

"Business Logic" --> "Kafka": Publish Cache Invalidation
"Kafka" --> "Redis": Consume and Invalidate Cache

"Business Logic" --> "Elasticsearch": Search/Index

note right of "Kafka"
  Enables asynchronous processing
  and decouples components
end note

note right of "MongoDB Cluster"
  Provides high availability
  and horizontal scalability
end note

@enduml
