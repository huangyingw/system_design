@startuml Microservices Fault Tolerance Design

!define RECTANGLE class
!define STORAGE database

skinparam backgroundColor #FAFAFA
skinparam handwritten false
skinparam defaultFontName Arial
skinparam defaultFontSize 14
skinparam roundcorner 20
skinparam shadowing false

title Microservices Fault Tolerance with Circuit Breaker and Service Degradation

rectangle "Client Applications" as ClientApps #E1F5FE

rectangle "API Gateway" as APIGateway #B3E5FC {
    component "Request Router" as RequestRouter
    component "Circuit Breaker" as CircuitBreaker
    component "Fallback Handler" as FallbackHandler
}

rectangle "Service Registry" as ServiceRegistry #81D4FA

rectangle "Microservices" as Microservices #4FC3F7 {
    component "Service A" as ServiceA
    component "Service B" as ServiceB
    component "Service C" as ServiceC
}

rectangle "Monitoring & Alerting" as Monitoring #03A9F4 {
    component "Health Checker" as HealthChecker
    component "Metrics Collector" as MetricsCollector
}

database "Database" as Database #0288D1

ClientApps -[#FF5722,thickness=2]-> APIGateway : <back:#FFFFFF><color:#FF5722>1. API Request</color></back>
APIGateway -[#FF9800,thickness=2]-> ServiceRegistry : <back:#FFFFFF><color:#FF9800>2. Service Lookup</color></back>
APIGateway -[#FFC107,thickness=2]-> Microservices : <back:#FFFFFF><color:#FFC107>3. Forward Request</color></back>
Microservices -[#4CAF50,thickness=2]-> Database : <back:#FFFFFF><color:#4CAF50>4. Data Operations</color></back>
Monitoring -[#2196F3,thickness=2]-> Microservices : <back:#FFFFFF><color:#2196F3>5. Monitor Health & Metrics</color></back>
Monitoring -[#9C27B0,thickness=2]-> APIGateway : <back:#FFFFFF><color:#9C27B0>6. Update Circuit Breaker Status</color></back>

note top of CircuitBreaker
  Circuit Breaker States:
  - Closed: Normal operation
  - Open: Stop calls to failing service
  - Half-Open: Test if service recovered
end note

note bottom of FallbackHandler
  Fallback Strategies:
  - Return cached data
  - Degrade service functionality
  - Redirect to alternative service
end note

note bottom of Microservices
  Service Degradation:
  - Disable non-critical features
  - Limit request rate
  - Return simplified responses
end note

note bottom of Monitoring
  Monitoring Responsibilities:
  - Track error rates and latency
  - Detect service health issues
  - Trigger circuit breaker state changes
end note

@enduml

