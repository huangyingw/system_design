@startuml
actor User

package "API Gateway" {
  [API Gateway] as APIGW
}

package "Authentication & Authorization" {
  [Auth Service] as AuthService
}

package "Feed Producer" {
  [Content Management System] as CMS
  [Producer] as Producer
}

package "Message Queue" {
  [Message Queue] as MQ
}

package "Backend Services" {
  [Feed Service] as FeedService
  [User Preferences Service] as PrefService
  [Recommendation Engine] as RecEngine
  [Logging & Monitoring] as Logging
}

package "Storage" {
  [Distributed Cache] as Cache
  [NoSQL Database] as Database
}

package "Feed Consumer" {
  [WebSocket Service] as WSService
  [Push Notification Service] as PushService
  [Consumer] as Consumer
  User --> Consumer : "Get Feed"
}

' API Gateway manages incoming requests
User --> APIGW : "1. Request Feed / Publish News"
APIGW --> AuthService : "2. Authenticate & Authorize"
APIGW --> Producer : "3. Publish News (Authorized)"
Producer --> MQ : "4. Push News Feed"

' Backend services manage feed generation, personalization, and storage
MQ --> FeedService : "5. Deliver Feed"
FeedService --> RecEngine : "6. Generate Personalized Feed"
FeedService --> PrefService : "7. Fetch User Preferences"
FeedService --> Logging : "8. Log Feed Generation"
FeedService --> Cache : "9. Store Hot Feeds"
FeedService --> Database : "10. Store All Feeds"

' Consumer fetches or receives feeds
Consumer --> APIGW : "11. Request Latest Feeds (Authenticated)"
APIGW --> FeedService : "12. Request Feeds"
FeedService --> Cache : "13. Fetch Hot Feeds"
FeedService --> Database : "14. Fetch Older Feeds"

' Push and real-time updates to consumers
FeedService --> WSService : "15. Push Feed to WebSocket"
FeedService --> PushService : "16. Send Push Notification"
WSService --> Consumer : "17. Receive Real-time Feed"
PushService --> Consumer : "18. Receive Feed Notification"

@enduml
